{
  "articles": [
    {
      "path": "basics.html",
      "title": "Distill Basics",
      "description": "Scientific and technical writing, native to the web",
      "author": [],
      "contents": "\n\nContents\nCreating\nan article\nFigures\nTables\nEquations\nCitations\nFootnotes and asides\nTable of\ncontents\nCode blocks\nCode folding\nSyntax\nhighlighting\nAppendices\nTheming\nAcknowledgments\n\nCreating an article\nTo create an R Markdown\ndocument that uses the Distill format, first install the\ndistill R package from CRAN:\n\n\ninstall.packages(\"distill\")\n\n\n\nThen, use the New R Markdown dialog within RStudio\nto create a new Distill article:\n\nYou can also create a new Distill article from the command line\nwith:\n\n\nlibrary(distill)\ncreate_article(\"article.Rmd\")\n\n\n\nDistill articles use distill::distill_article as their\noutput format, and typically include title, description, date,\nauthor/affiliation, and bibliography entries in their YAML\nfront-matter:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\ndate: May 4, 2018\nauthor:\n  - first_name: \"Yihui\"\n    last_name: \"Xie\"\n    url: https://github.com/yihui\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\n    orcid_id: 0000-0003-0645-5666\n  - name: \"JJ Allaire\"\n    url: https://github.com/jjallaire\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\n  - name: \"Rich Iannone\"\n    url: https://github.com/rich-iannone\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\nbibliography: biblio.bib\noutput: distill::distill_article\n---\nAuthor names can be specified using explicit first_name\nand last_name fields or with a single name\nfield. Author entries must have at least a name and url\nspecified (the affiliation fields are optional). Specify an author’s Orcid ID using the orcid_id\nfield.\nThe article’s description and author bylines are automatically\nrendered as part of the title area of the document.\nThe date field should be formatted either as month, day,\nyear or as year, month, day (various notations are supported as long as\nthe components appear in one of these orders).\nThe bibliography field is used to provide a reference to\nthe Bibtex file where all of the sources cited in your article are\ndefined. The citations section describes how to\ninclude references to these sources in your article.\nFigures\nDistill provides a number of options for laying out figures within\nyour article. By default figures span the width of the main article\nbody:\n\nHowever, some figures benefit from using additional horizontal space.\nIn this cases the layout chunk option enables you to\nspecify a wide variety of other layouts.\nFor example, if we wanted to display a figure a bit outside the\nbounds of the article text, we could specify the\nl-body-outset layout via the layout chunk\noption:\n```{r, layout=\"l-body-outset\", fig.width=6, fig.height=1.5}\nlibrary(ggplot2)\nggplot(diamonds, aes(carat, price)) + geom_smooth() +\n  facet_grid(~ cut)\n```\n\n\n\nNote that when specifying an alternate layout you should\nalso specify an appropriate fig.width and\nfig.height for that layout. These values don’t determine\nthe absolute size of the figure (that’s dynamic based on the layout) but\nthey do determine the aspect ratio of the figure.\nSee the documentation on figure layout for\ndetails on additional layout options.\nThe examples above are based on conventional R plots. Distill\narticles can also incorporate diagrams and\ninteractive visualizations based on\nJavaScript and D3.\nTables\nThere are a number of options available for HTML display of data\nframes within Distill articles. Here, we use the\npaged_table() function to display a page-able view of the\nmtcars dataset built in to R:\n```{r, layout=\"l-body-outset\"}\nlibrary(rmarkdown)\npaged_table(mtcars)\n```\n\n\nlibrary(rmarkdown)\npaged_table(mtcars)\n\n\n\n\n\nNote that we used layout=\"l-body-outset\" to cause the\ntable to occupy slightly more horizontal space than the article text.\nAll of available figure layout options work\nas expected for tables.\nSee the documentation on table display for\ndetails on the various techniques available for rendering tables.\nEquations\nInline and display equations are supported via standard markdown MathJax syntax. For example, the\nfollowing LaTeX\nmath:\n$$\n\\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2}\n$$\nWill be rendered as:\n\\[\n\\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2}\n\\]\nCitations\nBibtex is the supported way of making academic citations. To include\ncitations, first create a bibtex file and refer to it from the\nbibliography field of the YAML front-matter (as illustrated above).\nFor example, your bibliography file might contain:\n@Book{xie2015,\n  title = {Dynamic Documents with R and knitr},\n  author = {Yihui Xie},\n  publisher = {Chapman and Hall/CRC},\n  address = {Boca Raton, Florida},\n  year = {2015},\n  edition = {2nd},\n  note = {ISBN 978-1498716963},\n  url = {http://yihui.name/knitr/},\n}\nCitations are then used in the article body with standard R Markdown\nnotation, for example: [@xie2015] (which references an id\nprovided in the bibliography). Note that multiple ids (separated by\nsemicolons) can be provided.\nThe citation is presented inline like this: (Xie\n2015). If you have an appendix, a bibliography is\nautomatically created and populated in it.\nSee the article on citations for\nadditional details on using citations, including how to provide the\nmetadata required to make your article more easily citable for\nothers.\nFootnotes and asides\nFootnotes use standard Pandoc markdown notation, for example\n^[This will become a hover-able footnote]. The number of\nthe footnote will be automatically generated. 1\nYou can also optionally include notes in the gutter of the article\n(immediately to the right of the article text). To do this use the\n<aside> tag.\n<aside>\nThis content will appear in the gutter of the article.\n<\/aside>\nThis content will appear in the gutter of the article.\nYou can also include figures in the gutter. Just enclose the code\nchunk which generates the figure in an <aside>\ntag:\n<aside>\n```{r}\nggplot(mtcars, aes(hp, mpg)) + geom_point() + geom_smooth()\n```\n<\/aside>\n\nTable of contents\nYou can add a table of contents using the toc option and\nspecify the depth of headers that it applies to using the\ntoc_depth option. For example:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput:\n  distill::distill_article:\n    toc: true\n    toc_depth: 2\n---\nIf the table of contents depth is not explicitly specified, it\ndefaults to 3 (meaning that all level 1, 2, and 3 headers will be\nincluded in the table of contents).\nThe table of contents will automatically float to the left when the\narticle is displayed at more than 1000px wide. To always show the table\nof contents on top specify toc_float: false:\noutput:\n  distill::distill_article:\n    toc: true\n    toc_float: false\nCode blocks\nBy default the Distill format does not display the code for chunks\nthat are evaluated to produce output (knitr option\necho = FALSE).\nThe echo = FALSE default reflects the fact that Distill\narticles are often used to present the results of analyses rather than\nthe underlying code. To display the code that was evaluated to produce\noutput you can set the echo chunk option to\nTRUE:\n```{r, echo=TRUE}\n1 + 1\n```\nTo include code that is only displayed and not evaluated specify the\neval=FALSE option:\n```{r, eval=FALSE, echo=TRUE}\n1 + 1\n```\nThere are a number of default values that Distill establishes for\nknitr chunk options (these defaults also reflect the use case of\npresenting results/output rather than underlying code):\nOption\nValue\nComment\necho\nFALSE\nDon’t print code by default.\nwarning\nFALSE\nDon’t print warnings by default.\nmessage\nFALSE\nDon’t print R messages by default.\ncomment\nNA\nDon’t preface R output with a comment.\nR.options\nlist(width = 70)\n70 character wide console output.\nKeeping R code and output at 70 characters wide (or less) is\nrecommended for readability on a variety of devices and screen\nsizes.\nAs illustrated above, all of these defaults can be overridden on a\nchunk-by-chunk basis by specifying chunk options.\nYou can also change the global defaults using a setup chunk. For\nexample:\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  echo = TRUE,\n  warning = TRUE,\n  message = TRUE,\n  comment = \"##\",\n  R.options = list(width = 60)\n)\n```\nCode folding\nYou can use the code_folding option to hide code by\ndefault but allow readers to optionally show it. For example:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput:\n  distill::distill_article:\n    code_folding: true\n---\nWhen code folding is enabled, readers will see a “Show code” button\nlike this for each code chunk:\n\nYou can also specify code_folding on a per-chunk basis.\nFor example:\n```{r, code_folding=TRUE}\n1 + 1\n```\nProvide a string rather than TRUE to customize the\ncaption (the default is “Show code”).\nSyntax highlighting\nSyntax highlighting for R code is done using the downlit package, which provides\nautomatic linking of R functions to their online documentation. By\ndefault, highlighting is done using colors optimized for accessibility and\ncolor contrast.\nYou can customize highlighting behavior using the\nhighlight and highlight_downlit options. For\nexample, to use the Pandoc “haddock” highlighting theme and disable the\nuse of downlit, you would do this:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput:\n  distill::distill_article:\n    highlight: haddock\n    highlight_downlit: false\n---\nAvailable options for highlight include:\nOption(s)\nDescription\ndefault\nDefault (accessible) theme\nrstudio\nRStudio editor theme\nhaddock, kate, monochrome,\npygments, tango\nPandoc highlighting themes.\nPath to .theme file\nCustom Pandoc theme\nfile.\nAppendices\nAppendices can be added after your article by adding the\n.appendix class to any level 1 or level 2 header. For\nexample:\n## Acknowledgments {.appendix}\n\nThis is a place to recognize people and institutions. It may also be a good place\nto acknowledge and cite software that makes your work possible.\n\n## Author Contributions {.appendix}\n\nWe strongly encourage you to include an author contributions statement briefly \ndescribing what each author did.\nFootnotes and references will be included in the same section,\nimmediately beneath any custom appendices.\nTheming\nThe appearance of a Distill article can be customized using a theme and CSS just like Distill sites and\nblogs. You can use the create_theme() function to add a\ntheme CSS file in the current working directory.\nFor example:\n\n\ncreate_theme(name = \"theme\") \n\n\n\nRead more about how to customize a Distill theme. To apply a custom theme to\nan article, add a theme key to your article’s YAML\nfront-matter:\n---\ntitle: \"The Sharpe Ratio\"\noutput: \n  distill::distill_article:\n    toc: true\n    theme: theme.css\n---\nOne of the fastest ways to change the default appearance is to use\ncustom Google fonts. To do this, you need to do two things:\nEmbed the font using the @import\nmethod, and\nSpecify the font in the CSS file.\nYou can do both of these things inside your theme.css\nfile. For example, here is an article styled with the demo theme\ndetailed here.\n\n\n\n\nScreenshot\nA themed articletheme.css snippet\n/* base variables */\n\n/* Edit the CSS properties in this file to create a custom\n   Distill theme. Only edit values in the right column\n   for each row; values shown are the CSS defaults.\n   To return any property to the default,\n   you may set its value to: unset\n   All rows must end with a semi-colon.                      */\n\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n@import url('https://fonts.googleapis.com/css2?family=Amiri');\n@import url('https://fonts.googleapis.com/css2?family=Bitter');\n@import url('https://fonts.googleapis.com/css2?family=DM+Mono');\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    \"Amiri\", serif;\n  --mono-font:       \"DM Mono\", monospace;\n  --body-font:       \"Bitter\", sans-serif;\n  --navbar-font:     \"Amiri\", serif;\n}\n\n/* More properties ... */\n\nAcknowledgments\nDistill for R Markdown builds on the work of many individuals and\nprojects. Shan Carter, Ludwig Schubert, and Christopher Olah created the Distill\nweb framework. John MacFarlane\ncreated the Pandoc universal markup converter. Davide Cervone and Volker Sorge created the MathJax\nlibrary for rendering mathematical notation on the web. Mike Bostock created the D3\nlibrary for producing dynamic, interactive data visualizations for the\nweb. We are grateful for the spirit of generosity that moved these\nindividuals to create high-quality open source software for the benefit\nof all.\n\n\n\n\nXie, Yihui. 2015. Dynamic Documents with r and Knitr. 2nd ed.\nBoca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/.\n\n\nThis will become a hover-able\nfootnote↩︎\n",
      "last_modified": "2022-05-12T17:21:41+02:00"
    },
    {
      "path": "blog_workflow.html",
      "title": "Blog Post Workflow",
      "description": "Recommendations on managing blog post drafts and a review of tools available to incorporate posts contributed by outside authors. \n",
      "author": [],
      "contents": "\n\nContents\nOverview\nManaging\ndrafts\nDraft option\nGit branches\n\nRenaming\nposts\nImporting\nposts\nCreating a\npost\nImporting a\npost\nUpdating\nposts\nCreative\nCommons\nCanonical\nURLs\n\n\nOverview\nDistill supports a variety of workflows for blog post authoring. For\na blog authored by a single individual, the following simple conventions\nare typically all that’s required:\nAuthor post R Markdown documents within subdirectories of the\n_posts directory.\nMark posts under development as drafts until they are ready to be\npublished.\nFor more sophisticated requirements, the following workflows are also\nsupported:\nAuthoring posts within their own standalone Git\nrepositories.\nImporting posts staged elsewhere on the web (e.g. published to\nRPubs, located in a Git repository, or published within another Distill\nblog).\nDistill also includes tools for verifying that imported posts are\navailable under an appropriate Creative Commons license and\nensuring that posts syndicated from one blog to another give credit\nwithin the Google search index to the originating blog. These tools are\ndescribed below in the importing posts\nsection.\nManaging drafts\nThere are two distinct ways to manage work in progress on a Distill\npost:\nUsing the draft option to prevent the article from\nbeing listed in the article index and in the sitemap; and\nWorking on the post within a Git branch and merging/publishing it\nvia pull request.\nDraft option\nIf you want to work on a post for a period of time without having it\nbe added to the listing page, add draft: true to the post’s\nmetadata. For example:\n---\ntitle: \"The Sharpe Ratio\"\ndescription: |\n  In this post we present a classic finance use case using the\n  PerformanceAnalytics, quantmod, and dygraphs packages. \n  We'll demonstrate importing stock data, building a portfolio,\n  and then calculating the Sharpe Ratio. \ndraft: true\n---\nWhen you are ready to publish the post, either remove the\ndraft option or set it to false, then re-Knit\nthe post or build the website using render_site().\nGit branches\nIf the source code for you website is managed within a Git repository then another way to\norganize work on a new post is to create a Git\nbranch.\nOnce you’ve done enough work on the post within your branch, you can\ncreate a pull\nrequest and then ask others for feedback on the post before it is\nmerged.\nThis workflow has some nice benefits:\nYou can use the commenting and feedback system of your Git host\n(e.g. GitHub) to discuss the post in a structured fashion with clear\nlinkages back to the source code. Depending on the service used to\npublish your website you might get a preview associated with the PR\n(e.g. with Netlify and GitHub).\nYou can manage contributions to your blog from others that don’t\nhave commit access to the blog (anyone can create a pull request for a\npublic repository).\nYou can squash\nand merge to have a clean commit history on master.\nThe mechanics of creating branches and pull requests are beyond the\nscope of this article. Follow the links above or reference other online\nresources to learn more.\nRenaming posts\nPosts are stored within the _posts sub-directory of your\nsite, and have a directory name that reflects the date that you created\nthe post along with the post’s title slug. For\nexample:\n_posts/2016-11-08-sharpe-ratio\nNote that the date prefix is not strictly required, but is done by\ndefault as a convenience so that posts appear in chronological order\nwithin the filesystem.\nIf you work on a post over the course of a few days and/or if you\nchange your post’s title after you begin working on it, you may want to\nrename the post directory. You can use the\nrename_post_dir() function to update the date and/or title\nslug reflected in the directory name. For example:\n\n\n# rename to reflect the title and date in the post YAML front-matter\nrename_post_dir(\"_posts/2016-11-08-sharpe-ratio\") \n\n\n\nYou can also specify an explicit slug and/or\ndate_prefix if you prefer not to use values derived from\nthe post’s YAML.\nNote that you should be sure to rebuild your site after renaming a\npost so that it’s updated URL is reflected in the index page and RSS\nfeed.\n\nImporting posts\nYou may prefer a workflow where posts are worked on separately from\nyour website/blog and then imported when they are ready to be published.\nThis might be the case for a few different reasons:\nYou want posts to be contained within their own Git\nrepositories\nIt’s more convenient for contributors to work on posts independently\nand then be incorporated into your blog. Example in the\nwild: RStudio AI blog.\nYou want to re-publish posts originally published on another\nblog.\nBelow we will cover how to create a standalone post, how to import\nposts, synchronize to subsequent updates of those posts, as well as\naddress related copyright and search indexing concerns.\nCreating a post\nYou want to have a public GitHub repository that contains the html\noutput of a distill post. Here’s a possible workflow using RStudio IDE\nand usethis, and\nnot taking into account your using private data (that’d you need to add to\n.gitignore)\nCreate a new RStudio project,\nIn that project from the new file menu choose “New file”, “R\nMarkdown”,“From template”: distill article;\nusethis::use_git();\nusethis::use_github();\nEdit the Rmd, knit, commit.\nNote that with this workflow your name won’t be guessed based on\nprevious posts.\nImporting a post\nYou can import a post using the import_post() function,\npassing the URL where the post is published to. For example:\n\n\nimport_post(\"https://rpubs.com/jjallaire/visualizing-asset-returns\")\nimport_post(\"https://example.com/visualizing-asset-returns.html\")\n\n\n\nYou can also import a post from a GitHub repository. For example:\n\n\nimport_post(\"https://github.com/jjallaire/distill-article\")\n\n\n\nNote that importing a post does not require the original R Markdown\ndocument used to author the post—you only need access to the published\nHTML of a post to import it.\nPost dates\nWhen you import a post, the date for the post will be automatically\nset to the current day (the idea being that whenever the post was\nauthored, the day you import it is the day it’s been published to your\nblog). You can modify this behavior using the date\nparameter. For example:\n\n\nimport_post(\"https://github.com/jjallaire/distill-article\", \n            date = as.Date(\"2017-07-12\"))\n\n\n\nPost slugs\nThe “slug” for a post determines the URL for the post within your\nblog. By default, slugs are automatically computed using the date and\ntitle of the post. For example, the slug for the example just above\nwould have been 2017-07-12-distill-article.\nYou can also override the automatically generated slug entirely using\nthe slug parameter. For example:\n\n\nimport_post(\"https://github.com/jjallaire/distill-article\", \n            slug = \"an-article-about-distill\")\n\n\n\nUpdating posts\nIf a post that you have imported is subsequently modified and you\nwant to synchronize to the changes, you can use the\nupdate_post() post function. For example:\n\n\nupdate_post(\"_posts/2018-07-09-distill-article\")\n\n\n\nYou can also just use the post slug (rather than including the\n_posts directory prefix):\n\n\nupdate_post(\"2018-07-09-distill-article\")\n\n\n\nCreative Commons\nThe Distill tools for importing posts make it very easy to aggregate\nposts published elsewhere on the web into your blog. Note however that\nyou need to ensure that you have appropriate permission to re-publish\nthese posts!\nTo facilitate this, Distill will scan any imported post for Creative Commons\ncopyright metadata, and in the case that none is found confirm that you\nstill want to import the post. Consequently, you should ask that authors\nwriting posts for your blog always include the\ncreative_commons field in their post metadata. For\nexample:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput: distill::distill_article\ncreative_commons: CC BY\n---\nLearn more about the creative_commons field in the\ndocumentation on post\nmedatata.\nIf you know that you have permission to import and republish a post\nyou can suppress this prompt by passing\ncheck_license = FALSE to the import_post()\nfunction.\nCanonical URLs\nWhen you specify a creative_commons license for a blog\npost you make it easier for others to re-publish your post, giving you a\nbroader audience for your work. In this case you may also want to ensure\nthat the original URL where your post appeared be the one that appears\nin search engine results.\nTo facilitate this, Distill automatically specifies a canonical\nurl for posts published within a blog. That way, when a post is\nimported into another blog, search indexes still point back to the\noriginal article.\nIf you prefer to disable this behavior, you can add\ncanonical: false to your blog’s configuration in\n_site.yml. For example:\nname: \"reproducible-finance-with-r\"\ntitle: \"Reproducible Finance with R\"\ndescription: |\n  Exploring reproducible finance with the R statistical \n  computing environment.\nbase_url: https://beta.rstudioconnect.com/content/11424/\ncollections:\n  posts:\n    canonical: false\nWhile canonical URLs are provided automatically for blog posts, they\naren’t for standalone articles. You can explicitly provide a canonical\nURL for a standalone article using the canonical_url\nmetadata field:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\ndate: May 4, 2018\nauthor:\n  - name: Nora Jones \n    url: https://example.com/norajones\ncanonical_url: https://rstudio.github.io/distill\n---\n\n\n\n",
      "last_modified": "2022-05-12T17:21:42+02:00"
    },
    {
      "path": "blog.html",
      "title": "Creating a Blog",
      "description": "Create a blog to publish a collection of Distill articles",
      "author": [],
      "contents": "\n\nContents\nGetting\nstarted\nWebsite or\nblog?\nCreating a\nblog\nConfiguration\nCreating a\npost\nRenaming\nposts\nListing\npages\nRSS feed\nPost drafts\n\nNext steps\nComments and sharing\nSite search\nSource code\nOrganizing\nposts\nPreview\nimages\nCitations\nSubscriptions\nCustom HTML\nSupporting\nfiles\n\nCollections\nCreating a collection\n\nTheming\nExample\nthemes\n\nPublishing a\nblog\nExamples\n\nDistill for R Markdown websites include integrated support for\nblogging. To create a blog you author a collection of posts (located in\nthe _posts sub-directory of your website) and then dedicate\na page (usually the website homepage) to a listing of all of your\nposts.\nGetting started\nWebsite or blog?\nStructure difference: Websites are just\ncollections of pages you can navigate to via the top navigation bar,\nwhereas blogs have collections of posts that can\nbe indexed and syndicated (via their RSS feed). Distill blogs are a\ndistill website with added blog posts.\nLayout difference: Within a blog, Distill\nenables a special page on your website called a listing page. Whereas websites\nrequire you to manually set up links to pages, a listing page collects\nlinks to posts for you, displaying key metadata (like date published,\nauthor, categories, title, etc.) and a thumbnail image. When you knit\nand publish a new post, this page automatically updates by adding the\nmost recent post to the top of the list.\nWorkflow difference: Furthermore, website pages and root\npages of blogs are re-rendered when the site is rebuilt but\nblog articles are not. Each blog article has to be rendered on its own,\nwith intent. Why? Given that R package upgrades have a tendency to break\nolder code, continuously re-rendering old posts is nearly impossible to\ndo without errors, especially over longer periods of time.\n\nCreating a blog\nIf you are using RStudio, the easiest way to get started is to use\nthe Distill Blog option in the RStudio New Project\ndialog:\n\nA new RStudio\nProject for the blog will be created and opened. The blog will\ninclude the following files:\nOption\nDescription\n_site.yml\nWebsite configuration file.\nindex.Rmd\nBlog home page.\nabout.Rmd\nBlog about page.\n_posts/welcome/welcome.Rmd\nWelcome post for the blog.\nNote that the welcome post is just there to provide some\nskeletal content for the blog – feel free to delete it and add your own\ninitial post to the blog as described in creating a post.\nIf you are not using RStudio you can also call the Distill\ncreate_blog() function:\n\n\nlibrary(distill)\ncreate_blog(dir = \"my-blog\", title = \"My Blog\")\n\n\n\nThe basic scaffolding for a blog and an initial welcome post will be\ncreated within the my-blog sub-directory.\nConfiguration\nAfter you’ve created the blog scaffolding, there are a couple of\nadditional configuration items you’ll want to add to your\n_site.yml so that it’s easier to share content on the blog\nvia RSS and social networks like Twitter:\nA short description of the site. This field is used\nfor the channel description of your RSS feed.\nA base_url for the site (the URL where it will be\npublished to). This is used both for RSS feed items and for sharing\nposts via Open Graph and Twitter Card.\nFor example:\n_site.yml\nname: \"reproducible-finance-with-r\"\ntitle: \"Reproducible Finance with R\"\ndescription: |\n  Exploring reproducible finance with the R statistical \n  computing environment.\nbase_url: https://beta.rstudioconnect.com/content/11424/\nnavbar:\n  logo: images/rstudio.png\n  right:\n    - text: \"Home\"\n      href: index.html\n    - text: \"About\"\n      href: about.html\n    - text: \"Contributors\"\n      href: contributors.html\n    - icon: fa fa-rss\n      href: index.xml\noutput: distill::distill_article\nNote that we’ve also added a feed icon to the right side of the menu\nbar which makes it easy to discover and browse the RSS feed for the\nblog.\nCreating a post\nThe easiest way to start authoring a new post is to call the\ncreate_post() function from within your blog’s directory.\nFor example:\n\n\nlibrary(distill)\ncreate_post(\"The Sharpe Ratio\")\n\n\n\nThis will create a sub-directory for your post within the\n_posts directory, add a stub Distill article, and open the\narticle for editing.\nIf you want your post to start out as a draft (i.e. not be included\nwithin the listing of all posts) then you can add\ndraft = TRUE. For example:\n\n\ncreate_post(\"The Sharpe Ratio\", draft = TRUE)\n\n\n\nYou work on blog posts independent of the enclosing website (use\nKnit to render and preview the post just like any R\nMarkdown document). This is in fact the only way to update post content\n— posts are considered standalone documents that are not re-rendered\nwhen the site is built. This is because posts are often expensive to\nrender and have R package dependencies that may be difficult to satisfy\nas time goes on.\nRenaming posts\nPosts are stored within the _posts sub-directory of your\nsite, and have a directory name that reflects the date that you created\nthe post along with the post’s title slug. For\nexample:\n_posts/2016-11-08-sharpe-ratio\nNote that the date prefix is not strictly required, but is done by\ndefault as a convenience so that posts appear in chronological order\nwithin the filesystem.\nIf you work on a post over the course of a few days and/or if you\nchange your post’s title after you begin working on it, you may want to\nrename the post directory. You can use the\nrename_post_dir() function to update the date and/or title\nslug reflected in the directory name. For example:\n\n\n# rename to reflect the title and date in the post YAML front-matter\nrename_post_dir(\"_posts/2016-11-08-sharpe-ratio\") \n\n\n\nYou can also specify an explicit slug and/or\ndate_prefix if you prefer not to use values derived from\nthe post’s YAML.\nNote that you should be sure to rebuild your site after renaming a\npost so that it’s updated URL is reflected in the index page and RSS\nfeed.\n\nListing pages\nOnce you have authored one or more posts you’ll want to create a\nlisting page. You can do this by adding a listing metadata\nentry to the page you to include the listing on. This is often the main\npage for the website (index.Rmd). For example:\nindex.Rmd\n---\ntitle: \"Reproducible Finance with R\"\nsite: distill::distill_website\nlisting: posts\n---\nIn our example blog\n(which will be described in more detail below) this results in the\nfollowing listing:\n\nCustom listings\nAbove we demonstrated creating a listing page for all posts. You can\nalso create a custom listing for a subset of posts (e.g. a gallery of\nfeatured posts). To do this, just enumerate the posts you want to\ninclude as follows:\ngallery.Rmd\n---\ntitle: \"Gallery of featured posts\"\nlisting:\n  posts:\n    - 2016-11-08-sharpe-ratio\n    - 2017-11-09-visualizing-asset-returns \n    - 2017-09-13-asset-volatility \n---\nCategories\nIf your posts include categories metadata, then the page\nwill also include categories within the article listing. For example,\nhere is some post metadata that includes categories:\n---\ntitle: \"The Sharpe Ratio\"\n# (additional metadata e.g. description and date, excluded for brevity)\ncategories:\n  - portfolios\n  - dygraphs\nAs a result of including categories, the listing page\nnow looks like this:\n\nCategories are listed in the right-hand sidebar and are also\ndisplayed as metadata for each post. The name of each post’s author is\nalso displayed in the article listing. You can disable both category\ndisplays as well as authors display using collection\nproperties defined in _site.yml. For example:\n_site.yml\nname: \"reproducible-finance-with-r\"\ntitle: \"Reproducible Finance with R\"\ndescription: |\n  Exploring reproducible finance with the R statistical \n  computing environment.\nbase_url: https://beta.rstudioconnect.com/content/11424/\ncollections:\n  posts:\n    categories: false\n    categories_metadata: false\n    authors_metadata: false\nRSS feed\nWhen you create a listing page an RSS feed is created\nautomatically for the page (using the name of the listing page with a\n.xml file extension). You can link to the RSS feed within\nyour site’s navigation bar as follows (some navbar entries excluded for\nbrevity):\n_site.yml\nname: \"reproducible-finance-with-r\"\ntitle: \"Reproducible Finance with R\"\ndescription: |\n  Exploring reproducible finance with the R statistical \n  computing environment.\nbase_url: https://beta.rstudioconnect.com/content/11424/\nnavbar:\n  right:\n    - icon: fa fa-rss\n      href: index.xml\noutput: distill::distill_article\nNote that the description and base_url\nfields are both required to generate an RSS feed.\nBy default the most recent 20 articles will be included in the RSS\nfeed. You can change this by specifying feed_items_max\nwithin the collection configuration in _site.yml (navbar\nand output format fields omitted for brevity):\n_site.yml\nname: \"reproducible-finance-with-r\"\ntitle: \"Reproducible Finance with R\"\ndescription: |\n  Exploring reproducible finance with the R statistical \n  computing environment.\nbase_url: https://beta.rstudioconnect.com/content/11424/\ncollections:\n  posts:\n    feed_items_max: 50\nSpecify feed_items_max: false to have no limit on the\nnumber of items included in the feed.\nRSS options\nBy default, RSS feeds include only a summary of each post (based on\nthe description field). If you want to include the full\ncontents of the post (e.g. for syndication to another blog) add an\nrss: full_content entry to your site config as follows:\n_site.yml\nrss:\n  full_content: true\nIf you want to create dedicated feeds that map to particular\ncategories (e.g. to syndicate only a subset of your posts), you can do\nthis:\n_site.yml\nrss:\n  full_content: true\n  categories:\n    - portfolios\n    - forecasting\nThe category-based feeds will be created in a categories\ndirectory at the top level of the site.\nPost drafts\nIf you want to work on a post for a period of time without having it\nbe added to the listing page, add draft: true to the post’s\nmetadata. For example:\n---\ntitle: \"The Sharpe Ratio\"\ndescription: |\n  In this post we present a classic finance use case using the\n  PerformanceAnalytics, quantmod, and dygraphs packages. \n  We'll demonstrate importing stock data, building a portfolio,\n  and then calculating the Sharpe Ratio. \ndraft: true\n---\nWhen you are ready to publish the post, either remove the\ndraft option or set it to false, then build\nthe website.\nBeyond support for drafts, Distill has a number of additional\nfeatures to accommodate a variety of post authoring and contribution\nworkflows, including importing posts published elsewhere on the web\n(e.g. on RPubs, in a Git repository, or on another blog). The article on\nblog post workflow describes these\noptions in more detail.\nNext steps\nComments and sharing\nReaders will likely want to comment on and share articles they read\non your blog. You can enable support for Disqus comments and sharing links for\nTwitter, LinkedIn, and other services by adding options to the\ncollection:posts section of _site.yml.\nFor example, the following options provide the Disqus\nshortname for a site and specify that we want sharing buttons for\nTwitter and LinkedIn.\n_site.yml\nname: \"reproducible-finance-with-r\"\ntitle: \"Reproducible Finance with R\"\ndescription: |\n  Exploring reproducible finance with the R statistical \n  computing environment.\nbase_url: https://beta.rstudioconnect.com/content/11424/\ncollections:\n  posts:\n    disqus: reproducible-finance-with-r\n    share: [twitter, linkedin]\nThe following footer is then automatically included at the end of\neach post:\n\nNote that the base_url field is required in order to use\nDisqus and sharing links.\nValid values for the share option are\ntwitter, linkedin, facebook,\ngoogle-plus, and pinterest.\nBy default, the full text of Disqus comments are not displayed\n(rather, a link is provided that will expand the comment section). This\nis done so that a long comment section doesn’t obscure the bibliography\nand other appendices. If you’d rather show the comments by default you\ncan use this alterante syntax for disqus configuration:\ncollections:\n  posts:\n    disqus: \n      shortname: reproducible-finance-with-r\n      hidden: false\n    share: [twitter, linkedin]\nSpecifying the hidden: false option for\ndisqus will causes all comments to be displayed inline by\ndefault.\nSite search\nBlog sites automatically include a search box within the navigation\nbar. You can disable the search box using the the search\nfield of the navbar key within _site.yml. For\nexample:\n---\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\nnavbar:\n  logo:\n    image: images/logo.png\n    href: https://www.rstudio.com\n  search: false\n---\nNote that top level articles within blog sites will also be included\nin search results so long as they have a description\nmetadata field.\nSource code\nIf you want to display a link to the source code for your blog on the\nnavigation bar, add a source_url field to the\nnavbar definition. For example:\n---\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\nnavbar:\n  logo:\n    image: images/logo.png\n    href: https://www.rstudio.com\n  source_url: https://github.com/rstudio/distill\n---\nNote that if you’ve already defined a repository_url\nfield in _site.yml you can just use\nsource_url: true and your repository_url will\nbe used for the link.\nOrganizing posts\nYou can use whatever scheme you like to organize the\n_posts directory. You can have all posts at the top level\nor you can create subdirectories to create groupings of posts.\nOne popular scheme for organizing blog posts is to use a date prefix\nfor the post directory names. For example:\n_posts/\n  2017-11-09-visualizing-asset-returns/\n  2017-09-13-asset-volatility/\n  2017-03-07-quandl-and-forecasting/\n  2016-11-08-sharpe-ratio/\nThe benefits of this scheme are that post names are given additional\nuniqueness (to guard against colliding names over the long term) and are\nalso automatically listed in order when browsing the _posts\ndirectory.\nNote that if you use a date-prefixed post directory you are not\nrequired to specify an explicit date field within your\npost’s metadata.\nPreview images\nNote that the listing for our example above includes a preview image\nfor each post. Preview thumbnail images are generated automatically\nbased on the first plot encountered within your post. You can specify\nthat a specific plot should be used as the preview image using the\npreview chunk option. For example:\n```{r, layout=\"l-body-outset\", preview=TRUE}\nlibrary(ggplot2)\nggplot(diamonds, aes(carat, price)) + geom_smooth() +\n  facet_grid(~ cut)\n```\nIf you want to use another image entirely as a post preview you add a\npreview field to the post’s metadata. For example, here we\nadd a preview field to the example metadata from above\n(some fields excluded for brevity):\n---\ntitle: \"The Sharpe Ratio\"\ndescription: |\n  In this post we present a classic finance use case using the\n  PerformanceAnalytics, quantmod, and dygraphs packages. \n  We'll demonstrate importing stock data, building a portfolio,\n  and then calculating the Sharpe Ratio. \npreview: images/sharpe-ratio.png\n---\nPreview images are also used for generating Open Graph and Twitter Card metadata. However,\nsince those systems require that preview images be specified as absolute\nURLs, you also need to add a base_url field to your\n_site.yml file as described above in Getting Started.\nCitations\nIf your _site.yml file provides a base_url\nfield, then an article citation appendix\nand related metadata will be included automatically within all published\nposts. For example:\n\nIf you want to disable this behavior you can use the\ncollections:posts:citations field within\n_site.yml. For example:\n_site.yml\nname: \"reproducible-finance-with-r\"\ntitle: \"Reproducible Finance with R\"\ndescription: |\n  Exploring reproducible finance with the R statistical \n  computing environment.\nbase_url: https://beta.rstudioconnect.com/content/11424/\ncollections:\n  posts:\n    disqus: reproducible-finance-with-r\n    share: [twitter, linkedin]\n    citations: false\nYou can also disable citations for an individual post by adding\ncitation: false to the post’s YAML metadata.\nSubscriptions\nYou can add HTML that enables readers to subscribe to your blog by\nincluding the collections:posts:subscribe option within\n_site.yml. The subscribe option in turn points\nto an HTML file that provides the ability to subscribe to your blog. For\nexample:\n_site.yml\nname: \"reproducible-finance-with-r\"\ntitle: \"Reproducible Finance with R\"\ndescription: |\n  Exploring reproducible finance with the R statistical \n  computing environment.\nbase_url: https://beta.rstudioconnect.com/content/11424/\ncollections:\n  posts:\n    disqus: reproducible-finance-with-r\n    share: [twitter, linkedin]\n    subscribe: _subscribe.html\n_subscribe.html\n<form method='post' action='https://blogtrottr.com'>\n  <p>Enjoy this blog? Get notified of new posts via email:<\/p>\n  <input type='text' name='btr_email' />\n  <input type='hidden' name='btr_url'\n         value='https://beta.rstudioconnect.com/content/11424/index.xml'/>\n  <input type='hidden' name='schedule_type' value='0' />\n  <input type='submit' value='Subscribe' />\n<\/form>\nThis example uses the Blogtrottr service to provide an\nemail subscription. You could also use another service or simply include\na link to your RSS feed.\nThe contents of _subscribe.html will be included in both\nthe sidebar of the main listing page as well as in the footer of\narticles. Note that relative URLs won’t work in subscription HTML since\nthe content appears at different levels of the site (thus we include the\nfull URL to the RSS feed in the example above).\nCustom HTML\nYou can also add arbitrary HTML to the top of the sidebar by\nincluding the collections:posts:custom option within\n_site.yml. The custom option in turn points to\nan HTML file that will be displayed above the “Subscribe” and\n“Categories” sections. Unlike the Subscribe HTML, Cutstom HTML is not\ndisplayed in article footers. This custom feature can be used to display\nanything in the sidebar that Distill does not automatically generate.\nWhile only one custom file may be defined per collection, the HTML\ncontained within is extremely adaptable to different use cases (even\nseveral simultaneously). For example, the below snippets will display an\nAbout section on top, and below that a search bar:\n_site.yml\nname: \"reproducible-finance-with-r\"\ntitle: \"Reproducible Finance with R\"\ndescription: |\n  Exploring reproducible finance with the R statistical \n  computing environment.\nbase_url: https://beta.rstudioconnect.com/content/3776/\ncollections:\n  posts:\n    disqus: reproducible-finance-with-r\n    share: [twitter, linkedin]\n    custom: _custom.html\n_custom.html\n<div class=\"sidebar-section custom\">\n  <h3>About<\/h3>\n  This blog explores reproducible finance with the \n  <a href=\"https://www.r-project.org/\">R<\/a> \n  statistical computing environment.\n<\/div>\n\n<div class=\"sidebar-section custom\">\n  <h3>Search<\/h3>\n  <form action=\"https://duckduckgo.com/\">\n    <input type=\"text\" name=\"q\" placeholder=\"Search...\">\n    <input type=\"hidden\" name=\"sites\" \n      value=\"https://beta.rstudioconnect.com/content/3776/\"> <!-- Replace with your blog URL -->\n    <!--<button type=\"submit\">Search<\/button>-->\n  <\/form>\n<\/div>\n\nWhile the custom HTML option inherits general CSS styling from the\nrest of the Distill blog, by default it does not inherit the\nsidebar-specific CSS. In order to fully match the rest of the sidebar\nsections, each section must be nested within a\n<div class=\"sidebar-section custom\"> tag, as seen in\nthe above example. This configuration is intended to provide a good\nbalance between flexibility and ease-of-use.\nThe example search bar functionality uses the popular DuckDuckGo search engine. After entering\nsearch terms and hitting the enter key the user is taken to the search\nengine’s website and shown relevant search results from the blog. Note\nthat the blog will need to have been recently crawled by the search\nengine in order for search results to be thorough and up to date.\nReplacing the HTML snippet’s hard-coded blog URL should be the only\nmodification necessary to begin using this example. Other search engines\nmay be used with further modification. The “Search” button has been left\nout in this example, but may be uncommented if desired.\nSupporting files\nWhen a blog post is published, resource files located alongside the\npost in its directory are also published. The following files are\nnot published by default:\nFiles beginning with \".\" (hidden files).\nFiles beginning with \"_\"\nFiles known to contain R source code (e.g. \".R\",\n\".s\", \".Rmd\"), R data\n(e.g. \".RData\", \".rds\"), or configuration data\n(e.g. \"rsconnect\" ,\"packrat\",\n\"renv\")).\nYou can override this behavior using a resources\nmetadata entry for your post, which can specify explicit files to\ninclude or exclude. For example (some fields\nexcluded for brevity):\n---\ntitle: \"The Sharpe Ratio\"\ndescription: |\n  In this post we present a classic finance use case using the\n  PerformanceAnalytics, quantmod, and dygraphs packages. \n  We'll demonstrate importing stock data, building a portfolio,\n  and then calculating the Sharpe Ratio. \nresources:\n  exclude:\n    *.csv    \n---\nCollections\nAs described above, adding a blog to a Distill website requires\ncreating a “posts” collection (i.e. a _posts directory\ncontaining sub-directories, each of which includes an article) and\nadding a listing page for your posts (most often the site’s home\npage).\nIn addition to “posts”, you can add other collections of articles to\nyour site with their own index pages. The main benefits of including\narticles within a collection are:\nThe articles are never re-rendered unless you explicitly Knit them\n(which keeps your site building even if the R code within the article no\nlonger runs due to e.g. changes in it’s package dependencies).\nYou can generate an index page and RSS feed for the collection.\nCreating a collection\nTo create a new article collection, do the following:\nCreate a top level directory for the collection (e.g\n“_analyses”)\nAdd an entry for it to your _site.yml file. For\nexample:\ncollections:\n  posts: \n    categories: true\n  analyses:\n    categories: true\nOptionally, create an index page for your collection by adding\nthe appropriate listing YAML front matter. For example, you\ncould create a file named analyses.Rmd within the top-level\ndirectory of your website with the following YAML:\n---\ntitle: \"Analyses\"\nlisting: analyses\n---\nYou may also want to add a link to your listing page in the site navigation menu.\nYou can use the create_post() function to create\narticles within any collection. For example:\ncreate_post(\"water-quality-trends\", collection = \"analyses\")\nTheming\nDistill blogs can use themes and\nCSS just like Distill sites. You\ncan use the create_theme() function to add a theme CSS file\nin the current working directory.\nFor example:\n\n\ncreate_theme(name = \"theme\") \n\n\n\nRead more about customizing a Distill theme. To apply a custom theme\nsite-wide, add a theme key to the top-level of your\n_site.yml configuration file:\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\ntheme: theme.css \nnavbar:\n# (navbar definition here)\nBlog posts (along with listing and custom listing pages) will follow the theme.\nBelow are some examples of different themes applied to our demo\nblog.\n\n\n\nExample themes\n\nDemo\nDemo theme detailed here.\n\n\n\nPiping Hot Data\nInspired by: https://www.pipinghotdata.com/\n\n\n\nBefore I Sleep\nInspired by: https://milesmcbain.xyz/\n\n\n\nTidymodels\nInspired by: https://tidymodels.org (courtesy Desirée De Leon)\n\n\n\n\nPublishing a blog\nAfter you’ve authored one or more posts you will want to build the\nentire site before publishing it.\nIf your Distill website is contained within an RStudio project you\ncan use the Build Website command available in the\nBuild pane to generate the site:\n\nTo build a website from the command line, use the\nrmarkdown::render_site() function:\n\n\nlibrary(rmarkdown)\nrender_site()\n\n\n\nThere are a variety of options available for making your site\navailable to others, see the article on website publishing for details.\nExamples\nThe distill reference\nsite includes several example\nsites and blogs.\nAn example which reproduces several posts from the Reproducible\nFinance with R series on the R Views blog can be found here: https://beta.rstudioconnect.com/content/11424/\nThe source code for the example can be found here: https://github.com/jjallaire/reproducible-finance-with-r\n\n",
      "last_modified": "2022-05-12T17:21:43+02:00"
    },
    {
      "path": "citations.html",
      "title": "Citations",
      "description": "Referencing other works and creating citeable articles",
      "author": [],
      "contents": "\n\nContents\nCiting\nother works\nCreating citeable articles\nWeb articles\nJournal\narticles\n\nGoogle\nScholar\n\nDistill articles support including citations and a corresponding\nbibliography using standard R Markdown citation syntax. Distill also\nprovides tools for making your articles more easily citeable, as well as for\ngenerating Google Scholar compatible\ncitation metadata.\nCiting other works\nUse standard R\nMarkdown bibliographies for citing other works. To do this, first\ncreate a bibliography file using a supported format (e.g. CSL or BibTeX)\nand refer to it from the bibliography field of the YAML\nfront-matter. For example:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput: distill::distill_article\ndate: May 4, 2018\nauthor:\n  - name: Nora Jones \n    url: https://example.com/norajones\n    affiliation: Spacely Sprockets\n    affiliation_url: https://example.com/spacelysprokets\nbibliography: biblio.yaml\n---\nHere’s an example of what a CSL bibliography might look like:\n---\nreferences:\n- type: article-journal\n  id: WatsonCrick1953\n  author:\n  - family: Watson\n    given: J. D.\n  - family: Crick\n    given: F. H. C.\n  issued:\n    date-parts:\n    - - 1953\n      - 4\n      - 25\n  title: 'Molecular structure of nucleic acids: a structure for\n    deoxyribose nucleic acid'\n  title-short: Molecular structure of nucleic acids\n  container-title: Nature\n  volume: 171\n  issue: 4356\n  page: 737-738\n  DOI: 10.1038/171737a0\n  URL: https://www.nature.com/articles/171737a0\n  language: en-GB\n...\nTo cite this within your article, use standard R Markdown notation,\nfor example: [@WatsonCrick1953] (referencing an id provided\nin the bibliography). See the documentation on Pandoc\nCitations for details on in-text citations, citing multiple works,\netc.\nNote that both CSL and BibTeX bibliographies are supported. See the\nPandoc\nBibliographies documentation for addional details on creating a\nbibliography for use with Pandoc.\nCreating citeable articles\nYou can make it easier for others to cite your work by providing\nadditional metadata with the YAML front-matter of your article.\nCitations can be provided for both articles published to the web or for\narticles published in journals (with or without a DOI).\nWeb articles\nTo provide a citation for an article published to the web, include\nauthor and date metadata as well as a\ncitation_url. For example:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\ndate: May 4, 2018\nauthor:\n  - name: Nora Jones \n    url: https://example.com/norajones\n    affiliation: Spacely Sprockets\n    affiliation_url: https://example.com/spacelysprokets\ncitation_url: https://rstudio.github.io/distill\nslug: jones2018distill\nbibliography: biblio.bib\n---\nNote that the citation_url field is not required for blog articles (in that case it’s computed\nautomatically using the site’s base_url field).\nWhen this metadata is available, a citation appendix is automatically\nadded to the article which looks like this:\n\nNote that we also included a slug field (in this case\njones2018distill) which affects the abbreviated version of\nthe citation included in the BibTeX entry. If you don’t provide a\nslug then one will be automatically generated.\nJournal articles\nIf your article is published within a Journal, you can add the\nfollowing the additional fields to generate the appropriate citation\nentry:\nMetadata\nDescription\njournal\nName of Journal published within\ndoi\nDigital Object Identifier (DOI)\nHere’s our previous examples amended with these fields:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\ndate: May 4, 2018\nauthor:\n  - name: Nora Jones \n    url: https://example.com/norajones\n    affiliation: Spacely Sprockets\n    affiliation_url: https://example.com/spacelysprokets\njournal: \"Journal of Data Science Software\"\ndoi: \"10.23915/distill.00010\"\nslug: jones2018distill\ncitation_url: https://rstudio.github.io/distill\nbibliography: biblio.bib\n---\nThis is how the citation is presented in the appendix:\n\nFor Journal articles, the citation_url is included in\nthe BibTeX entry within the note field.\nGoogle Scholar\nDistill articles automatically include metadata compatible with the\nformat indexed by Google\nScholar. This makes it easy for indexing engines (Google Scholar or\notherwise) to extract not only a citation for your article but also\ninformation on other sources which you cited.\nFor example, here is the Google Scholar metadata automatically\nincluded for the home page of the Distill for R Markdown website:\n<!--  https://scholar.google.com/intl/en/scholar/inclusion.html#indexing -->\n<meta name=\"citation_title\" content=\"Distill for R Markdown\"/>\n<meta name=\"citation_fulltext_html_url\" content=\"https://rstudio.github.io/distill\"/>\n<meta name=\"citation_fulltext_world_readable\" content=\"\"/>\n<meta name=\"citation_online_date\" content=\"2018/05/04\"/>\n<meta name=\"citation_publication_date\" content=\"2018/05/04\"/>\n<meta name=\"citation_author\" content=\"JJ Allaire\"/>\n<meta name=\"citation_author_institution\" content=\"RStudio\"/>\n<meta name=\"citation_author\" content=\"Rich Iannone\"/>\n<meta name=\"citation_author_institution\" content=\"RStudio\"/>\n<meta name=\"citation_author\" content=\"Yihui Xie\"/>\n<meta name=\"citation_author_institution\" content=\"RStudio\"/>\n<meta name=\"citation_reference\" content=\"citation_title=Distill;\ncitation_publication_date=2016;citation_publisher=Distill Working\nGroup;citation_doi=10.23915/distill;citation_author=Shan Carter;\ncitation_author=Chirs Olah;citation_author=Arvind Satyanarayan\"/>\n<meta name=\"citation_reference\" content=\"citation_title=Literate\nprogramming;citation_publication_date=1984;\ncitation_publisher=British Computer Society;citation_volume=27;\ncitation_author=Donald E. Knuth\"/>\n<meta name=\"citation_reference\" content=\"citation_title=Dynamic\ndocuments with r and knitr;citation_publication_date=2015;\ncitation_publisher=Chapman; Hall/CRC;citation_author=Yihui Xie\"/>\nNote that the citation_reference fields provide\ninformation on which works your article cited.\nThe code above is HTML so don’t worry if you aren’t familiar with the\nsyntax. The important thing to know is that citation data is provided in\na way that machines can easily read and index.\nIf you are publishing a Journal article, there are some additional\nmetadata fields you can provide to enhance the Google Scholar metadata\ngenerated by Distill. These include additional fields describing the\nJournal (title, issn, and\npublisher) as well fields describing the\nvolume and issue in which your article was\npublished. For example:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\ndate: May 4, 2018\nauthor:\n  - name: Norah Jones \n    url: https://example.com/norahjones\n    affiliation: Spacely Sprockets\n    affiliation_url: https://example.com/spacelysprokets\njournal: \n  title: \"Journal of Data Science Software\"\n  issn: 2490-1752\n  publisher: Data Science Press\nvolume: 10\nissue: 4\ndoi: \"10.23915/distill.00010\"\nslug: jones2018distill\ncitation_url: https://rstudio.github.io/distill\nbibliography: biblio.bib\n---\n\n\n\n\n",
      "last_modified": "2022-05-12T17:21:43+02:00"
    },
    {
      "path": "diagrams.html",
      "title": "Diagrams",
      "description": "Illustrate concepts with diagrams",
      "author": [],
      "contents": "\n\nContents\nDiagrammeR\nD3 diagrams\nStatic\ndiagrams\n\nThere are a number of ways to create diagrams for use in Distill\narticles, a few worth considering are:\nThe DiagrammerR\npackage, which enables you to generate graph diagrams using text (both\nGraphViz and Mermaid are supported).\nThe r2d3 package,\nwhich enables you to create fully custom diagrams with D3.js.\nFor more highly customized static diagrams you can use a variety\nof vector graphics tools (e.g. Inkscape) to create SVG files that\ncan be included within your article.\nDiagrammeR\nYou can use the DiagrammerR package\nto include GraphViz\nvisualizations within a Distill article. For example, if you have a\nGraphViz file graph.gv,\nyou can include it with the following code:\n```{r, layout=\"l-page\", fig.height=2}\nlibrary(DiagrammeR)\ngrViz(\"images/graph.gv\")\n```\n\n\nlibrary(DiagrammeR)\ngrViz(\"images/graph.gv\")\n\n\n\n\nNote that since this diagram is much wider than it is tall, we\nspecify layout=\"l-page\" to provide adequate horizontal\nlayout space and fig.height=2 to ensure the correct aspect\nratio. See the documentation on figure layout\nfor details on all available layout options.\nDiagrammeR also supports diagrams created with Mermaid. For example:\n```{r}\nlibrary(DiagrammeR)\nmermaid(diagram = '\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice->>John: Hello John, how are you?\n  loop Healthcheck\n      John->>John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts<br/>prevail...\n  John-->>Alice: Great!\n  John->>Bob: How about you?\n  Bob-->>John: Jolly good!\n')\n```\n\n\nlibrary(DiagrammeR)\nmermaid(diagram = '\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice->>John: Hello John, how are you?\n  loop Healthcheck\n      John->>John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts<br/>prevail...\n  John-->>Alice: Great!\n  John->>Bob: How about you?\n  Bob-->>John: Jolly good!\n')\n\n\n\n\nD3 diagrams\nThe r2d3 package enables\nyou to include illustrations created using D3.js. For example, the following code\nrenders flare.json\nusing the circlepacking.js\nscript:\n```{r, layout=\"l-screen-inset\", fig.height=8}\nlibrary(r2d3)\ndata <- jsonlite::read_json(\"flare.json\")\nr2d3(data, script = \"circlepacking.js\")\n```\n\n\nlibrary(r2d3)\ndata <- jsonlite::read_json(\"d3/circlepacking/flare.json\")\nr2d3(data, script = \"d3/circlepacking/circlepacking.js\")\n\n\n\n\nThis is an illustration that has lots of detail so it benefits from\nbeing rendered at nearly full screen width\n(layout=\"l-screen-inset\"). We also specify\nfig.height=8 to cause the illustration (which has a square\naspect ratio) to take advantage of the additional horizontal space.\nStatic diagrams\nFor more highly customized static diagrams you can use a vector\ngraphics tools like Inkscape, Adobe\nIllustrator, or Sketch.\nThese programs are all capable of exporting SVG\n(Scalable Vector Graphics). Once you’ve exported an SVG you can\ninclude it in your article using the\nknitr::include_graphics() function. For example, to include\nthe SVG file created within this Inkscape\ntutorial you would use the following code:\n```{r}\nlibrary(knitr)\ninclude_graphics(\"images/flowchart.svg\")\n```\n\n\nlibrary(knitr)\ninclude_graphics(\"images/flowchart.svg\")\n\n\n\n\nThis particular illustration uses the default layout (occupying the\nfull width of the article text). Note though that you can use the\nvarious figure layout options to control the\nsize and placement of SVG files included from illustration programs.\n\n\n\n",
      "last_modified": "2022-05-12T17:21:46+02:00"
    },
    {
      "path": "figures.html",
      "title": "Figure Layout",
      "description": "Amplify figures by customizing layout",
      "author": [],
      "contents": "\n\nContents\nDefault\nlayout\nWider\nlayouts\nFull\nscreen layout\nStatic\nfigures\nCross-references\n\nDefault layout\nThere are a variety of ways to layout figures included within Distill\narticles. This layout is controlled by a set of layout classes, which\nare in turn applied to R Markdown chunks using the layout\nchunk option.\nThe default layout if layout is not specified is\nl-body, which will cause content to span the width of the\nmain article body:\n\n\nl-body\n\n\nFor example, a plot with the default l-body layout would\nlook like this:\n\n\ninclude_graphics(\"images/l-body-figure.png\")\n\n\n\n\nWider layouts\nFor elements you want to display a little larger, try\nl-body-outset or l-page:\n\n\nl-body-outset\n\n\n\n\nl-page\n\n\nFor example, here the l-body-outset layout is selected\nusing the layout chunk option:\n```{r, layout=\"l-body-outset\", fig.width=6, fig.height=1.5}\nlibrary(ggplot2)\nggplot(diamonds, aes(carat, price)) + geom_smooth() +\n  facet_grid(~ cut)\n```\n\n\ninclude_graphics(\"images/l-middle-figure.png\")\n\n\n\n\nNote that when specifying an alternate layout you should\nalso specify an appropriate fig.width and\nfig.height for that layout.\nFull screen layout\nOccasionally you’ll want to use the full browser width. For this, use\nl-screen:\n\n\nl-screen\n\n\nIf you want a bit space at the edges then you can use the\nl-screen-inset layout, which adds 15 pixels of padding to\neach side. Here we use l-screen-inset to display a Leaflet\nmap:\n```{r, layout=\"l-screen-inset\"}\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n\n\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n\n\n\n\nDepending on the content displayed by l-screen-inset,\nsometimes it’s nice to add some shading to further deliniate the\ndisplay. You can do this by adding shaded to the layout\ndeclaration:\n```{r, layout=\"l-screen-inset shaded\"}\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n\n\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n\n\n\n\nStatic figures\nTo include static figures (i.e. figures based on an existing PNG or\nJPEG file rather than a dynamically generated R plot), you can use the\nknitr::include_graphics() function:\n```{r}\nknitr::include_graphics(\"images/figure.png\")\n```\nYou can apply Distill layouts to static figures the same way that you\ndo plots:\n```{r layout=\"l-body-outset\"}\nknitr::include_graphics(\"images/figure.png\")\n```\nIf you are including a figure from an external source, it’s good\npractice to delineate this by applying the external class\nand adding a caption indicating where it is from. For example:\n```{r fig.cap=\"Figure from https://example.com\", out.extra=\"class=external\"}\nknitr::include_graphics(\"images/heatmap.png\")\n```\nUsing the external class and providing a “Figure from”\nlink makes it clear that the figure originated elsewhere (and is\ntherefore not covered by any of your article’s copyright or creative\ncommons license grants). For example, here’s how a figure taken from a\nStack Overflow post might appear:\nFigure from https://stackoverflow.com/questions/12196756/Cross-references\nWhen you assign a figure caption to a code chunk via the chunk option\nfig.cap, R plots will be put into figure environments,\nwhich will be automatically labeled and numbered, and can also be\ncross-referenced.\nFor example, here we add a fig.cap to one of our\nprevious examples:\n```{r diamonds, fig.cap=\"Diamond Prices\"}\nlibrary(ggplot2)\nggplot(diamonds, aes(carat, price)) + geom_smooth() +\n  facet_grid(~ cut)\n```\nThe label of the figure environment is generated from the label of\nthe code chunk, e.g., if the chunk label is diamonds, the\nfigure label will be fig:diamonds (the prefix\nfig: is added before diamonds.\nTo reference a figure, use the syntax \\@ref(label),\nwhere label is the figure label. So for the example above we’d use\n\\@ref(fig:diamonds), which would result in a\ncross-reference like this:\n\n\ninclude_graphics(\"images/figure-cross-references.png\")\n\n\n\n\nFor additional documentation on figure cross-references see the bookdown\ndocumentation on figures (Distill for R Markdown uses the bookdown\nimplementation of cross-references under the hood).\nOne important constraint to keep in mind is that if you want to\ncross-reference figures or tables generated from a code chunk, please\nmake sure the chunk label only contains alphanumeric characters\n(a-z, A-Z, 0-9), slashes (/), or dashes (-).\n\n\n\n",
      "last_modified": "2022-05-12T17:21:46+02:00"
    },
    {
      "path": "index.html",
      "title": "Distill for R Markdown",
      "description": "Scientific and technical writing, native to the web",
      "author": [
        {
          "name": "JJ Allaire",
          "url": "https://github.com/jjallaire"
        },
        {
          "name": "Rich Iannone",
          "url": "https://github.com/rich-iannone"
        },
        {
          "name": {},
          "url": {}
        },
        {
          "name": "Yihui Xie",
          "url": "https://github.com/yihui"
        }
      ],
      "date": "September 10, 2018",
      "contents": "\n\nContents\nCreating\nan article\nFigures\nTables\nEquations\nCitations\nFootnotes and asides\nTable of\ncontents\nCode blocks\nCode folding\nSyntax\nhighlighting\nAppendices\nTheming\nAcknowledgments\n\nDistill for R Markdown is a web publishing format optimized for\nscientific and technical communication. Distill articles include:\nReader-friendly typography that adapts well to mobile devices.\nFeatures essential to technical writing like LaTeX math, citations,\nand footnotes.\nFlexible figure layout options\n(e.g. displaying figures at a larger width than the article text).\nAttractively rendered tables with optional\nsupport for pagination.\nSupport for a wide variety of diagramming\ntools for illustrating concepts.\nThe ability to incorporate JavaScript and D3-based interactive visualizations.\nA variety of ways to publish\narticles, including support for publishing sets of articles as a Distill website or as a Distill blog.\nDistill for R Markdown is based on the Distill web framework,\nwhich was originally created for use in the Distill Machine Learning\nJournal (Carter, Olah, and Satyanarayan\n2016). Distill for R Markdown combines the technical\nauthoring features of Distill with R Markdown, enabling a fully\nreproducible workflow based on literate programming (Knuth 1984).\nCreating an article\nTo create an R Markdown\ndocument that uses the Distill format, first install the\ndistill R package from CRAN:\n\n\ninstall.packages(\"distill\")\n\n\n\nThen, use the New R Markdown dialog within RStudio\nto create a new Distill article:\n\nYou can also create a new Distill article from the command line\nwith:\n\n\nlibrary(distill)\ncreate_article(\"article.Rmd\")\n\n\n\nDistill articles use distill::distill_article as their\noutput format, and typically include title, description, date,\nauthor/affiliation, and bibliography entries in their YAML\nfront-matter:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\ndate: May 4, 2018\nauthor:\n  - first_name: \"Yihui\"\n    last_name: \"Xie\"\n    url: https://github.com/yihui\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\n    orcid_id: 0000-0003-0645-5666\n  - name: \"JJ Allaire\"\n    url: https://github.com/jjallaire\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\n  - name: \"Rich Iannone\"\n    url: https://github.com/rich-iannone\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\nbibliography: biblio.bib\noutput: distill::distill_article\n---\nAuthor names can be specified using explicit first_name\nand last_name fields or with a single name\nfield. Author entries must have at least a name and url\nspecified (the affiliation fields are optional). Specify an author’s Orcid ID using the orcid_id\nfield.\nThe article’s description and author bylines are automatically\nrendered as part of the title area of the document.\nThe date field should be formatted either as month, day,\nyear or as year, month, day (various notations are supported as long as\nthe components appear in one of these orders).\nThe bibliography field is used to provide a reference to\nthe Bibtex file where all of the sources cited in your article are\ndefined. The citations section describes how to\ninclude references to these sources in your article.\nFigures\nDistill provides a number of options for laying out figures within\nyour article. By default figures span the width of the main article\nbody:\n\nHowever, some figures benefit from using additional horizontal space.\nIn this cases the layout chunk option enables you to\nspecify a wide variety of other layouts.\nFor example, if we wanted to display a figure a bit outside the\nbounds of the article text, we could specify the\nl-body-outset layout via the layout chunk\noption:\n```{r, layout=\"l-body-outset\", fig.width=6, fig.height=1.5}\nlibrary(ggplot2)\nggplot(diamonds, aes(carat, price)) + geom_smooth() +\n  facet_grid(~ cut)\n```\n\n\n\nNote that when specifying an alternate layout you should\nalso specify an appropriate fig.width and\nfig.height for that layout. These values don’t determine\nthe absolute size of the figure (that’s dynamic based on the layout) but\nthey do determine the aspect ratio of the figure.\nSee the documentation on figure layout for\ndetails on additional layout options.\nThe examples above are based on conventional R plots. Distill\narticles can also incorporate diagrams and\ninteractive visualizations based on\nJavaScript and D3.\nTables\nThere are a number of options available for HTML display of data\nframes within Distill articles. Here, we use the\npaged_table() function to display a page-able view of the\nmtcars dataset built in to R:\n```{r, layout=\"l-body-outset\"}\nlibrary(rmarkdown)\npaged_table(mtcars)\n```\n\n\nlibrary(rmarkdown)\npaged_table(mtcars)\n\n\n\n\n\nNote that we used layout=\"l-body-outset\" to cause the\ntable to occupy slightly more horizontal space than the article text.\nAll of available figure layout options work\nas expected for tables.\nSee the documentation on table display for\ndetails on the various techniques available for rendering tables.\nEquations\nInline and display equations are supported via standard markdown MathJax syntax. For example, the\nfollowing LaTeX\nmath:\n$$\n\\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2}\n$$\nWill be rendered as:\n\\[\n\\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2}\n\\]\nCitations\nBibtex is the supported way of making academic citations. To include\ncitations, first create a bibtex file and refer to it from the\nbibliography field of the YAML front-matter (as illustrated above).\nFor example, your bibliography file might contain:\n@Book{xie2015,\n  title = {Dynamic Documents with R and knitr},\n  author = {Yihui Xie},\n  publisher = {Chapman and Hall/CRC},\n  address = {Boca Raton, Florida},\n  year = {2015},\n  edition = {2nd},\n  note = {ISBN 978-1498716963},\n  url = {http://yihui.name/knitr/},\n}\nCitations are then used in the article body with standard R Markdown\nnotation, for example: [@xie2015] (which references an id\nprovided in the bibliography). Note that multiple ids (separated by\nsemicolons) can be provided.\nThe citation is presented inline like this: (Xie\n2015). If you have an appendix, a bibliography is\nautomatically created and populated in it.\nSee the article on citations for\nadditional details on using citations, including how to provide the\nmetadata required to make your article more easily citable for\nothers.\nFootnotes and asides\nFootnotes use standard Pandoc markdown notation, for example\n^[This will become a hover-able footnote]. The number of\nthe footnote will be automatically generated. 1\nYou can also optionally include notes in the gutter of the article\n(immediately to the right of the article text). To do this use the\n<aside> tag.\n<aside>\nThis content will appear in the gutter of the article.\n<\/aside>\nThis content will appear in the gutter of the article.\nYou can also include figures in the gutter. Just enclose the code\nchunk which generates the figure in an <aside>\ntag:\n<aside>\n```{r}\nggplot(mtcars, aes(hp, mpg)) + geom_point() + geom_smooth()\n```\n<\/aside>\n\nTable of contents\nYou can add a table of contents using the toc option and\nspecify the depth of headers that it applies to using the\ntoc_depth option. For example:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput:\n  distill::distill_article:\n    toc: true\n    toc_depth: 2\n---\nIf the table of contents depth is not explicitly specified, it\ndefaults to 3 (meaning that all level 1, 2, and 3 headers will be\nincluded in the table of contents).\nThe table of contents will automatically float to the left when the\narticle is displayed at more than 1000px wide. To always show the table\nof contents on top specify toc_float: false:\noutput:\n  distill::distill_article:\n    toc: true\n    toc_float: false\nCode blocks\nBy default the Distill format does not display the code for chunks\nthat are evaluated to produce output (knitr option\necho = FALSE).\nThe echo = FALSE default reflects the fact that Distill\narticles are often used to present the results of analyses rather than\nthe underlying code. To display the code that was evaluated to produce\noutput you can set the echo chunk option to\nTRUE:\n```{r, echo=TRUE}\n1 + 1\n```\nTo include code that is only displayed and not evaluated specify the\neval=FALSE option:\n```{r, eval=FALSE, echo=TRUE}\n1 + 1\n```\nThere are a number of default values that Distill establishes for\nknitr chunk options (these defaults also reflect the use case of\npresenting results/output rather than underlying code):\nOption\nValue\nComment\necho\nFALSE\nDon’t print code by default.\nwarning\nFALSE\nDon’t print warnings by default.\nmessage\nFALSE\nDon’t print R messages by default.\ncomment\nNA\nDon’t preface R output with a comment.\nR.options\nlist(width = 70)\n70 character wide console output.\nKeeping R code and output at 70 characters wide (or less) is\nrecommended for readability on a variety of devices and screen\nsizes.\nAs illustrated above, all of these defaults can be overridden on a\nchunk-by-chunk basis by specifying chunk options.\nYou can also change the global defaults using a setup chunk. For\nexample:\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  echo = TRUE,\n  warning = TRUE,\n  message = TRUE,\n  comment = \"##\",\n  R.options = list(width = 60)\n)\n```\nCode folding\nYou can use the code_folding option to hide code by\ndefault but allow readers to optionally show it. For example:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput:\n  distill::distill_article:\n    code_folding: true\n---\nWhen code folding is enabled, readers will see a “Show code” button\nlike this for each code chunk:\n\nYou can also specify code_folding on a per-chunk basis.\nFor example:\n```{r, code_folding=TRUE}\n1 + 1\n```\nProvide a string rather than TRUE to customize the\ncaption (the default is “Show code”).\nSyntax highlighting\nSyntax highlighting for R code is done using the downlit package, which provides\nautomatic linking of R functions to their online documentation. By\ndefault, highlighting is done using colors optimized for accessibility and\ncolor contrast.\nYou can customize highlighting behavior using the\nhighlight and highlight_downlit options. For\nexample, to use the Pandoc “haddock” highlighting theme and disable the\nuse of downlit, you would do this:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput:\n  distill::distill_article:\n    highlight: haddock\n    highlight_downlit: false\n---\nAvailable options for highlight include:\nOption(s)\nDescription\ndefault\nDefault (accessible) theme\nrstudio\nRStudio editor theme\nhaddock, kate, monochrome,\npygments, tango\nPandoc highlighting themes.\nPath to .theme file\nCustom Pandoc theme\nfile.\nAppendices\nAppendices can be added after your article by adding the\n.appendix class to any level 1 or level 2 header. For\nexample:\n## Acknowledgments {.appendix}\n\nThis is a place to recognize people and institutions. It may also be a good place\nto acknowledge and cite software that makes your work possible.\n\n## Author Contributions {.appendix}\n\nWe strongly encourage you to include an author contributions statement briefly \ndescribing what each author did.\nFootnotes and references will be included in the same section,\nimmediately beneath any custom appendices.\nTheming\nThe appearance of a Distill article can be customized using a theme and CSS just like Distill sites and\nblogs. You can use the create_theme() function to add a\ntheme CSS file in the current working directory.\nFor example:\n\n\ncreate_theme(name = \"theme\") \n\n\n\nRead more about how to customize a Distill theme. To apply a custom theme to\nan article, add a theme key to your article’s YAML\nfront-matter:\n---\ntitle: \"The Sharpe Ratio\"\noutput: \n  distill::distill_article:\n    toc: true\n    theme: theme.css\n---\nOne of the fastest ways to change the default appearance is to use\ncustom Google fonts. To do this, you need to do two things:\nEmbed the font using the @import\nmethod, and\nSpecify the font in the CSS file.\nYou can do both of these things inside your theme.css\nfile. For example, here is an article styled with the demo theme\ndetailed here.\n\n\n\n\nScreenshot\nA themed articletheme.css snippet\n/* base variables */\n\n/* Edit the CSS properties in this file to create a custom\n   Distill theme. Only edit values in the right column\n   for each row; values shown are the CSS defaults.\n   To return any property to the default,\n   you may set its value to: unset\n   All rows must end with a semi-colon.                      */\n\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n@import url('https://fonts.googleapis.com/css2?family=Amiri');\n@import url('https://fonts.googleapis.com/css2?family=Bitter');\n@import url('https://fonts.googleapis.com/css2?family=DM+Mono');\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    \"Amiri\", serif;\n  --mono-font:       \"DM Mono\", monospace;\n  --body-font:       \"Bitter\", sans-serif;\n  --navbar-font:     \"Amiri\", serif;\n}\n\n/* More properties ... */\n\nAcknowledgments\nDistill for R Markdown builds on the work of many individuals and\nprojects. Shan Carter, Ludwig Schubert, and Christopher Olah created the Distill\nweb framework. John MacFarlane\ncreated the Pandoc universal markup converter. Davide Cervone and Volker Sorge created the MathJax\nlibrary for rendering mathematical notation on the web. Mike Bostock created the D3\nlibrary for producing dynamic, interactive data visualizations for the\nweb. We are grateful for the spirit of generosity that moved these\nindividuals to create high-quality open source software for the benefit\nof all.\n\n\n\n\nCarter, Shan, Chirs Olah, and Arvind Satyanarayan. 2016.\n“Distill.” Distill Working Group. https://doi.org/10.23915/distill.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” The\nComputer Journal 27 (2): 97–111.\n\n\nXie, Yihui. 2015. Dynamic Documents with r and Knitr. 2nd ed.\nBoca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/.\n\n\nThis will become a hover-able\nfootnote↩︎\n",
      "last_modified": "2022-05-12T17:21:48+02:00"
    },
    {
      "path": "interactivity.html",
      "title": "JavaScript & D3",
      "description": "Enhance communication with interactive visualizations",
      "author": [],
      "contents": "\n\nContents\nhtmlwidgets\nD3\nvisualizations\n\nThere are a variety of ways to add interactive JavaScript and D3\nvisualizations to your Distill articles, including:\nUsing pre-built htmlwidgets that wrap JavaScript\nvisualization libraries like Leaflet, Plotly, dygraphs, and threejs.\nCreating custom D3.js interactive\nvisualizations using the r2d3 package.\nhtmlwidgets\nIncluding htmlwidgets within\na Distill article is as easy as including an R plot. For example, the\nfollowing code embeds a Leaflet map:\n```{r}\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n```\n\n\nlibrary(leaflet)\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(lng=174.768, lat=-36.852, popup=\"The birthplace of R\")\n\n\n\n\nYou can also use figure layout options\nwith htmlwidgets. For example, here we set layout=\"l-page\"\nto specify that we want the widget to span the width of the page:\n```{r, layout=\"l-page\", fig.height=3}\nlibrary(dygraphs)\ndygraph(ldeaths)\n```\n\n\nlibrary(dygraphs)\ndygraph(ldeaths)\n\n\n\n\nNote that we specify fig.height=3 to provide a more\nnatural height for a widget that spans the entire width of the page.\nTo learn about available htmlwidgets see the showcase\npage and the htmlwidget\ngallery.\nD3 visualizations\nThe r2d3 package\nenables you to easily incorporate interactive graphics created using D3.js in your Distill articles.\nFor example, the following renders an interactive Voronoi diagram\ncreated using D3:\n```{r, layout=\"l-page\", fig.height=6}\nlibrary(r2d3)\nr2d3(script = \"voronoi.js\")\n```\n\n\nlibrary(r2d3)\nr2d3(script = \"d3/voronoi/voronoi.js\")\n\n\n\n\nNote that we specify layout=\"l-page\" to indicate that we\nwant the visualization to occupy the full width of the page.\n\n\n\n",
      "last_modified": "2022-05-12T17:21:49+02:00"
    },
    {
      "path": "metadata.html",
      "title": "Article Metadata",
      "description": "Enhance published articles by providing metadata",
      "author": [],
      "contents": "\n\nContents\nCode\nrepository\nCreative\nCommons\nExternal\nfigures\n\nPreview\nimages\nOpen Graph\nTwitter Card\nGoogle\nScholar\n\nYou can enhance Distill articles by providing various types of\nmetadata, including:\nLinks to the article’s source code repository.\nCreative Commons licensing\nterms.\nOpen Graph and Twitter Card metadata that is automatically\nincluded when the article is shared (e.g. on Twitter or within\nSlack).\nGoogle Scholar compatible citation\nmetadata for your article as well as other works cited by your\narticle.\nCode repository\nYou can include the repository_url field to indicate\nwhere the source code for your article can be found. For example:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput: distill::distill_article\nrepository_url: https://github.com/rstudio/distill\n---\nYou can optionally also include a compare_updates_url to\nprovide a URL that will show the differences between the article’s\ncurrent version and the version that was initially published. For\nexample:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput: distill::distill_article\nrepository_url: https://github.com/rstudio/distill\ncompare_updates_url: https://github.com/rstudio/distill/compare/pubv1...main\n---\nIf you include one or both of these fields, then an Updates and\nCorrections appendix is automatically generated. For example:\n\nCreative Commons\nThe Creative\nCommons copyright licenses and tools forge a balance inside the\ntraditional “all rights reserved” setting that copyright law creates.\nThese tools give everyone from individual creators to large companies\nand institutions a simple, standardized way to grant copyright\npermissions to their creative work.\nHere are some of the common forms of Creative Commons content\nlicense:\nLicense\nName\nDescription\nCC\nBY\nAttribution\nThis license lets others distribute, remix, tweak, and build upon\nyour work, even commercially, as long as they credit you for the\noriginal creation. This is the most accommodating of licenses\noffered.\nCC\nBY-SA\nAttribution-ShareAlike\nThis license lets others remix, tweak, and build upon your work even\nfor commercial purposes, as long as they credit you and license their\nnew creations under the identical terms. This license is often compared\nto “copyleft” free and open source software licenses. All new works\nbased on yours will carry the same license, so any derivatives will also\nallow commercial use.\nCC\nBY-ND\nAttribution-NoDerivs\nThis license allows for redistribution, commercial and\nnon-commercial, as long as it is passed along unchanged and in whole,\nwith credit to you.\nCC\nBY-NC\nAttribution-NonCommercial\nThis license lets others remix, tweak, and build upon your work\nnon-commercially, and although their new works must also acknowledge you\nand be non-commercial, they don’t have to license their derivative works\non the same terms.\nYou can designate articles that you create as Creative Commons\nlicensed by adding the creative_commons field and\nspecifying one of the standard Creative Commons licenses. For\nexample:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\noutput: distill::distill_article\ncreative_commons: CC BY\n---\nIf you include this field then a Reuse appendix is\nautomatically generated. For example:\n\nExternal figures\nNote that figures from external sources are explicitly carved out of\nthe license. If you are including a figure from an external source, it’s\ngood practice to delineate this by applying the .external\nclass and adding a caption indicating where it is from. For example:\n![Figure from https://example.com](heatmap.png){width=100% .external}    \nUsing the .external class and providing a “Figure from”\nlink makes it clear that the figure originated elsewhere (and is\ntherefore not covered by any of your article’s copyright or creative\ncommons license grants). For example, here’s how a figure taken from a\nStack Overflow post might appear:\nFigure from https://stackoverflow.com/questions/12196756/Preview images\nYou can specify a preview image for your article (for sharing on\nSlack, Twitter, etc.) in a number of different ways:\nYou can explicitly provide the full URL of the preview image via\nthe preview field in the article’s metadata. For\nexample:\n---\ntitle: \"JavaScript & D3\"\ndescription: Enhance communication with interactive visualizations \npreview: https://rstudio.github.io/distill/images/javascript-d3-preview.png\n---\nNote that the preview image is specified with a full absolute URL.\nThis is a requirement of both Open Graph and Twitter (relative image\nreferences are not supported). If you are publishing a standalone\nself-contained HTML version of your article then you’ll need to upload\nthe preview image to another location on the web in order to reference\nit.\nIf your article is not self-contained (it’s part of a Distill website or is generated with\nself_contained: false) then you can include the preview\nimage alongside your document. In this case you still need to specify\nthe root URL where your image will be published to using the\nbase_url field:\n---\ntitle: \"JavaScript & D3\"\ndescription: Enhance communication with interactive visualizations \nbase_url: https://rstudio.github.io/distill\npreview: images/javascript-d3-preview.png\n---\nThis technique is generally preferable to including the full URL\nsince it allows Distill to inspect the image file directly and provide\nadditional information about it’s size.\nYou can also specify that a specific figure within your article\nshould be used as the preview image. To do this, just add the\npreview = TRUE chunk option to the chunk which creates the\nfigure. For example:\n---\ntitle: \"JavaScript & D3\"\ndescription: Enhance communication with interactive visualizations \nbase_url: https://rstudio.github.io/distill\n---\n```{r, layout=\"l-body-outset\", preview=TRUE}\nlibrary(ggplot2)\nggplot(diamonds, aes(carat, price)) + geom_smooth() +\n  facet_grid(~ cut)\n```\nAs with using the preview metadata field, this method\nrequires that your Distill article is not a single standalone HTML file\n(self_contained: false) and also requires that you specify\na base_url field indicating the domain and path where the\narticle will be published.\nOpen Graph\nThe Open Graph protocol is a\nspecification that enables richer sharing of links to articles on the\nweb. Open Graph metadata is automatically generated for Distill\narticles. For example, here’s what you see in Slack when pasting in a\nlink to the article on using JavaScript and\nD3 within Distill articles:\n\nSlack uses Open Graph to extract and display the title, description,\nand a preview image (if specified) for the\nlink.\nTwitter Card\nTwitter\nCards are a way of enhancing the appearance of links to your article\non Twitter. When a link to your article is included in a Tweet, Twitter\nautomatically crawls your site to fetch any available Twitter Card\nmetadata.\nSee the section on preview images for\nadditional details on providing an image for your article that will be\nincluded on Twitter Cards.\nThere are two additional fields you can include that provide\nattribution for your link to the Twitter account of a website and/or\ncreator of the article. This attribution is specified via the\ntwitter:site and twitter:creator fields.\nHere’s a complete example that includes the attribution fields as\nwell as a preview image:\n---\ntitle: \"JavaScript & D3\"\ndescription: Enhance communication with interactive visualizations \nbase_url: https://rstudio.github.io/distill\npreview: images/javascript-d3-preview.png\ntwitter:\n  site: \"@rstudio\"\n  creator: \"@fly_upside_down\"\n---\nBe sure to enclose the Twitter account names in quotes (this is\nrequired because they start with @).\nGoogle Scholar\nDistill articles automatically include metadata compatible with the\nformat indexed by Google\nScholar. This makes it easy for indexing engines (Google Scholar or\notherwise) to extract not only a citation for your article but also\ninformation on other sources which you cited.\nFor example, here is the Google Scholar metadata automatically\nincluded for the home page of the Distill for R Markdown website:\n<!--  https://scholar.google.com/intl/en/scholar/inclusion.html#indexing -->\n<meta name=\"citation_title\" content=\"Distill for R Markdown\"/>\n<meta name=\"citation_fulltext_html_url\" content=\"https://rstudio.github.io/distill\"/>\n<meta name=\"citation_fulltext_world_readable\" content=\"\"/>\n<meta name=\"citation_online_date\" content=\"2018/05/04\"/>\n<meta name=\"citation_publication_date\" content=\"2018/05/04\"/>\n<meta name=\"citation_author\" content=\"JJ Allaire\"/>\n<meta name=\"citation_author_institution\" content=\"RStudio\"/>\n<meta name=\"citation_author\" content=\"Rich Iannone\"/>\n<meta name=\"citation_author_institution\" content=\"RStudio\"/>\n<meta name=\"citation_author\" content=\"Yihui Xie\"/>\n<meta name=\"citation_author_institution\" content=\"RStudio\"/>\n<meta name=\"citation_reference\" content=\"citation_title=Distill;\ncitation_publication_date=2016;citation_publisher=Distill Working\nGroup;citation_doi=10.23915/distill;citation_author=Shan Carter;\ncitation_author=Chirs Olah;citation_author=Arvind Satyanarayan\"/>\n<meta name=\"citation_reference\" content=\"citation_title=Literate\nprogramming;citation_publication_date=1984;\ncitation_publisher=British Computer Society;citation_volume=27;\ncitation_author=Donald E. Knuth\"/>\n<meta name=\"citation_reference\" content=\"citation_title=Dynamic\ndocuments with r and knitr;citation_publication_date=2015;\ncitation_publisher=Chapman; Hall/CRC;citation_author=Yihui Xie\"/>\nNote that the citation_reference fields provide\ninformation on which works your article cited.\nThe code above is HTML so don’t worry if you aren’t familiar with the\nsyntax. The important thing to know is that citation data is provided in\na way that machines can easily read and index.\nIf you are publishing a Journal article, there are some additional\nmetadata fields you can provide to enhance the Google Scholar metadata\ngenerated by Distill. These include additional fields describing the\nJournal (title, issn, and\npublisher) as well fields describing the\nvolume and issue in which your article was\npublished. For example:\n---\ntitle: \"Distill for R Markdown\"\ndescription: | \n  Scientific and technical writing, native to the web\ndate: May 4, 2018\nauthor:\n  - name: Norah Jones \n    url: https://example.com/norahjones\n    affiliation: Spacely Sprockets\n    affiliation_url: https://example.com/spacelysprokets\njournal: \n  title: \"Journal of Data Science Software\"\n  issn: 2490-1752\n  publisher: Data Science Press\nvolume: 10\nissue: 4\ndoi: \"10.23915/distill.00010\"\nslug: jones2018distill\ncitation_url: https://rstudio.github.io/distill\nbibliography: biblio.bib\n---\n\n\n\n\n",
      "last_modified": "2022-05-12T17:21:49+02:00"
    },
    {
      "path": "migrating.html",
      "title": "Migrating from Radix",
      "description": "Migrating to distill from the radix package",
      "author": [],
      "contents": "\nWhen the distill package was initially published on\nCRAN, it was named radix. The name of the package has\nbeen subsequently changed to reflect it’s relationship with the Distill web\nframework.\nYou can migrate your Radix documents to Distill by simply changing\nthe output format from radix::radix_article to\ndistill::distill_article. For example:\n\nIf you have created a blog or website with Radix, you should\nadditionally modify the _site.yml and\nindex.Rmd files to reflect the use of the Distill\npackage:\n\n\n\n\n",
      "last_modified": "2022-05-12T17:21:50+02:00"
    },
    {
      "path": "publish_article.html",
      "title": "Publishing Articles",
      "description": "Sharing Distill articles online",
      "author": [],
      "contents": "\n\nContents\nStandalone\nHTML\nRPubs & RStudio Connect\nGitHub Pages\nOther\nservices\n\nThis article covers the various ways you can publish Distill\narticles, including:\nSharing a standalone HTML file using E-mail, Dropbox,\netc.\nPublishing to RPubs or\nRStudio Connect.\nUsing GitHub Pages to host your\narticle on GitHub\nNote that it’s also possible to publish collections of Distill\narticles as a website (see the article on publishing websites for additional\ndetails).\nStandalone HTML\nWhen you render a Distill article using R Markdown, all of the\ncontent required to render the article (images generated by R plots,\nrequired CSS and JavaScript, etc.) are bundled into a single HTML\nfile.\nOften the simplest way to share a Distiill article is to share this\nHTML file using the same means you use to share other document types\nlike spreadsheets, presentations, and PDFs. You can send the article as\nan E-mail attachment or uploading it to Dropbox or any other file\nsharing service.\nThis type of sharing is suitable for private communications to small\ngroups. If you want to make your article available more broadly the\nfollowing sections cover various ways to do that.\nRPubs & RStudio Connect\nRPubs is a free service from RStudio\nfor sharing documents on the web. RStudio Connect is\na server product from RStudio for secure sharing of applications,\nreports, and plots.\nYou can publish to RPubs or RStudio Connect directly from within the\nR Markdown document preview window by clicking the\nPublish button:\n\nNote that all documents published to RPubs are publicly visible, so\nyou should only publish content you want to share publicly.\nUnlike RPubs, RStudio Connect is a server that you run inside an\norganization, so is suitable for publishing content that you only want\nvisible within your organization’s network.\nGitHub Pages\nGitHub Pages is a service\nthat lets you publish a website from any GitHub repository. While the\nservice supports publishing full websites, it’s also a perfectly\nsuitable place to publish a single Distill article.\nHere are the steps required to publish a Distill article to GitHub\nPages:\nCreate a new Git repository that will be used to host your\narticle.\nConfigure your repository to publish the contents of the\nmaster or main branch (you can do from the\nSettings page for the repository):\n\nCreate a file named .nojekyll in your repository\n(this is required to disable some processing of HTML files that GitHub\ndoes by default). You can do this with the following code:\n\n\nfile.create(\".nojekyll\")\n\n\n\nCreate a Distill article named index.Rmd within the\nrepository (using this name will allow your article to be served as the\ndefault web page for the repository).\nAdd appropriate metadata to the article. The article should at a\nminimum include title and description fields,\nand should also specify self_contained: false (this will\nmake the article load faster and will enable you to add a preview image for sharing the\narticle on Slack, Twitter, etc.):\n---\ntitle: \"Distill for R Markdown\"\ndescription: |\n  Scientific and technical writing, native to the web\noutput:\n  distill::distill_article:\n    self_contained: false\n---\nWrite and render your article using R Markdown.\nPush the article (including the HTML file generated when you\nrendered it) to GitHub. Your article is now published!\nGitHub Pages are served on the github.io domain (with\nyour GitHub account as a sub-domain). For example, if your GitHub\nusername is jsmith and your repository is named\ndistill-article then the article will be available at https://jsmith.github.io/distill-article.\nOther services\nNote that any web server or web host capable of hosting a static\nwebsite can equally well host a single Distill article. See the article\non publishing Distill websites for details on publishing articles on a\nvariety of other services including Netlify, Firebase, Site44, and Amazon S3.\n\n\n\n",
      "last_modified": "2022-05-12T17:21:50+02:00"
    },
    {
      "path": "publish_website.html",
      "title": "Publishing Websites",
      "description": "Publish your website using a variety of services",
      "author": [],
      "contents": "\n\nContents\nRStudio\nConnect\nGitHub Pages\nNetlify\nGoogle\nFirebase\nSite44\n(Dropbox)\nAmazon S3\nOther\nservices\n\nThere are a wide variety of ways to publish Distill websites. Website\ncontent is by default written to the _site sub-directory\n(you can customize this using the output_dir metadata\nfield). Publishing is simply a matter of copying the output directory to\na web server or web hosting service.\nBelow we describe several convenient options for Distill website\ndeployment including RStudio Connect, GitHub Pages, Netlify,\n[Firebase], [Site44], and Amazon S3. We’ll\nmostly defer to the documentation provided by the various services, but\nwill note any Distill website specific configuration required.\nRStudio Connect\nRStudio\nConnect is a server product from RStudio for secure sharing of\nwebsites, applications, reports, and plots.\nYou can deploy a Distill website to RStudio Connect from the command\nline using the distill::publish_website() function. For\nexample:\n\n\nlibrary(distill)\npublish_website(server = \"https://rsc.example.com\")\n\n\n\nNote that once you’ve published your site for the first time you can\nomit the server argument:\n\n\npublish_website()\n\n\n\nYou can also publish a Distill website directly to an RStudio Connect\nserver from within the website preview window by clicking the\nPublish button:\n\nNote that you can either publish your website with the source code\n(so it can be regenerated on a scheduled basis) or publish a copy of the\nwebsite you built locally. Generally publishing a copy is more\nstraightforward so that’s the recommended option unless you have\nspecialized requirements.\nUnlike the other website publishing options described below, RStudio Connect is\na server that you run inside an organization, so is suitable for\npublishing content that you only want visible within your organization’s\nnetwork as opposed to visible to the entire internet.\nGitHub Pages\nGitHub Pages is a service\nthat lets you publish a website from any GitHub repository. There are\ntwo additional configuration steps required to host a Distill website\nusing GitHub Pages:\nCreate a file named .nojekyll in your repository\n(this is required to disable some processing of HTML files that GitHub\ndoes by default). You can do this with the following code:\n\n\nfile.create(\".nojekyll\")\n\n\n\nSet the output_dir within _site.yml to\nmatch the repository directory your site is served from. You can\nconfigure GitHub Pages to publish from the root of your\nmaster or main branch or the docs\nsub-directory:\n\nDepending on your configuration you should set the\noutput_dir as follows:\noutput_dir: \".\"     # root of master or main branch\noutput_dir: \"docs\"  # docs directory of master or main branch\nSee the GitHub Pages\ndocumentation for additional details on creating and deploying websites\nwith GitHub.\nNetlify\nNetlify is a popular website\nhosting service that allows for both direct upload of website files or\nintegrated publishing from Git repositories (GitHub, GitLab, or\nBitbucket) via commit-hooks.\nIf you are using Netlify Git integration, be sure to set the publish\ndirectory to the output directory of your website (_site by\ndefault but modifiable via the output_dir metadata value).\nFor example:\n\nGoogle Firebase\nGoogle Firebase has a web hosting\nservice that enables easy deployment of websites using a set of\ncommand line tools.\nFirebase websites by default deploy content from the\npublic directory of the Firebase project directory. This\nmeans that you should set the output_dir to\n\"public\" within _site.yml:\n---\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\noutput_dir: \"public\"\n---\nSite44 (Dropbox)\nSite44 is a service that allows\nyou to publish websites from within Dropbox folders. Site44 creates a\nDropbox/Apps/site44 directory, and any folders within that\ndirectory are published as websites.\nThe recommended workflow for deploying Distill websites to Site44 is\nto develop your website in a separate project directory, and then, when\nit’s ready for final publishing, copy the contents of the\n_site directory to the folder for your website.\nAmazon S3\nIf you are a user of Amazon Web Services you can serve your website\ndirectly from Amazon S3. Note however that this option is a bit more\ntechnically involved than GitHub Pages, Netlify, or Site 44. See the\narticle on Hosting\na Static Website on Amazon S3 for additional details.\nOther services\nAny web server or web host can be used to deploy a Distill website.\nHere’s a recent CNET\nroundup of other web hosts you could consider. You can also deploy a\nDistill website on any internal (intranet) web server.\n\n\n\n",
      "last_modified": "2022-05-12T17:21:50+02:00"
    },
    {
      "path": "tables.html",
      "title": "Tables",
      "description": "Display data in attractive, compact formats",
      "author": [],
      "contents": "\n\nContents\nKnitr kable\nPaged tables\ngtsummary\ntables\ngt tables\nMarkdown\ntables\n\nThere are a number of options available for displaying tables within\nDistill articles, including:\nUsing the knitr::kable() function to render a data\nframe as HTML.\nUsing the rmarkdown::paged_table() function to\ncreate a page-able version of a data frame.\nUse the gtsummary and gt packages to create to create\npublication-ready analytical and summary tables.\nUsing standard markdown table syntax\nto create a custom table.\nKnitr kable\nThe knitr::kable() function will render an R data frame\nas an HTML table. For example:\n```{r, layout=\"l-body-outset\"}\nlibrary(knitr)\nkable(head(mtcars))\n```\n\n\nlibrary(knitr)\nkable(head(mtcars))\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\nOften times tables will require more width for their display than the\nstandard Distill article text width. Here we use\nlayout=\"l-body-outset\" to cause the table to outset\nslightly from the main text column. All of the available figure layouts can also be used with tables.\nPaged tables\nIf a data frame has a large number of rows it might not be practical\nto display it fully inline. In these situations you can use the\nrmarkdown::paged_table() function to create a table that\nallows pagination of rows and columns. For example:\n```{r, layout=\"l-body-outset\"}\nlibrary(rmarkdown)\npaged_table(mtcars)\n```\n\n\nlibrary(rmarkdown)\npaged_table(mtcars)\n\n\n\n\n\nThere are a number of options available that control the display of\npaged tables. By default, 10 rows at a time are displayed but you can\nuse the rows.print option to increase this. For\nexample:\n```{r, layout=\"l-body-outset\"}\nlibrary(rmarkdown)\npaged_table(mtcars, options = list(rows.print = 15))\n```\n\n\nlibrary(rmarkdown)\npaged_table(mtcars, options = list(rows.print = 15, cols.print = 5))\n\n\n\n\n\nHere is a summary of the available paged table options:\nOption\nDescription\nrows.print\nMaximum rows to print per page.\nmax.print\nMaximum rows in the table (defaults to 1000).\ncols.print\nMaximum columns in the table (defaults to 10).\nrownames.print\nPrint row names as part of the table.\ngtsummary tables\nThe gtsummary\npackage provides an elegant and flexible way to create publication-ready\nanalytical and summary tables. The package summarizes data sets,\nregression models, and more, using sensible defaults with highly\ncustomizable capabilities. For example:\n```{r}\nlibrary(gtsummary)\nlibrary(survival)\n\n# build glm table\nmod1 <- glm(response ~ trt + age + grade, trial, family = binomial)\nt1 <- tbl_regression(mod1, exponentiate = TRUE)\n\n# build survival model table\nt2 <-\n  coxph(Surv(ttdeath, death) ~ trt + grade + age, trial) %>%\n  tbl_regression(exponentiate = TRUE)\n\n# merge tables \ntbl_merge(\n  tbls = list(t1, t2),\n  tab_spanner = c(\"**Tumor Response**\", \"**Time to Death**\")\n)\n```\n\n\nlibrary(gtsummary)\nlibrary(survival)\n\n# build glm table\nmod1 <- glm(response ~ trt + age + grade, trial, family = binomial)\nt1 <- tbl_regression(mod1, exponentiate = TRUE)\n\n# build survival model table\nt2 <-\n  coxph(Surv(ttdeath, death) ~ trt + grade + age, trial) %>%\n  tbl_regression(exponentiate = TRUE)\n\n# merge tables \ntbl_merge(\n  tbls = list(t1, t2),\n  tab_spanner = c(\"**Tumor Response**\", \"**Time to Death**\")\n)\n\n\n\nCharacteristic\n      \n        Tumor Response\n      \n      \n        Time to Death\n      \n    OR1\n      95% CI1\n      p-value\n      HR1\n      95% CI1\n      p-value\n    Chemotherapy Treatment\n\n\n\n\n\nDrug A\n—\n—\n\n—\n—\nDrug B\n1.13\n0.60, 2.13\n0.7\n1.30\n0.88, 1.92\n0.2Age\n1.02\n1.00, 1.04\n0.10\n1.01\n0.99, 1.02\n0.3Grade\n\n\n\n\n\nI\n—\n—\n\n—\n—\nII\n0.85\n0.39, 1.85\n0.7\n1.21\n0.73, 1.99\n0.5III\n1.01\n0.47, 2.15\n>0.9\n1.79\n1.12, 2.86\n0.0141 OR = Odds Ratio, CI = Confidence Interval, HR = Hazard Ratio\n    \n\ngt tables\nThe gtsummary\npackage is built in top of the gt\npackage, which provides a flexible foundation for creating just about\nany sort of table you can imagine. Here is a brief example of how to use\ngt to create a table from the included\nsp500 dataset:\n```{r}\nlibrary(gt)\nlibrary(tidyverse)\nlibrary(glue)\n\n# Define the start and end dates for the data range\nstart_date <- \"2010-06-07\"\nend_date <- \"2010-06-14\"\n\n# Create a gt table based on preprocessed\n# `sp500` table data\nsp500 %>%\n  dplyr::filter(date >= start_date & date <= end_date) %>%\n  dplyr::select(-adj_close) %>%\n  gt() %>%\n  tab_header(\n    title = \"S&P 500\",\n    subtitle = glue::glue(\"{start_date} to {end_date}\")\n  ) %>%\n  fmt_date(\n    columns = vars(date),\n    date_style = 3\n  ) %>%\n  fmt_currency(\n    columns = vars(open, high, low, close),\n    currency = \"USD\"\n  ) %>%\n  fmt_number(\n    columns = vars(volume),\n    suffixing = TRUE\n  )\n```\n\n\nlibrary(gt)\nlibrary(tidyverse)\nlibrary(glue)\n\n# Define the start and end dates for the data range\nstart_date <- \"2010-06-07\"\nend_date <- \"2010-06-14\"\n\n# Create a gt table based on preprocessed\n# `sp500` table data\nsp500 %>%\n  dplyr::filter(date >= start_date & date <= end_date) %>%\n  dplyr::select(-adj_close) %>%\n  gt() %>%\n  tab_header(\n    title = \"S&P 500\",\n    subtitle = glue::glue(\"{start_date} to {end_date}\")\n  ) %>%\n  fmt_date(\n    columns = vars(date),\n    date_style = 3\n  ) %>%\n  fmt_currency(\n    columns = vars(open, high, low, close),\n    currency = \"USD\"\n  ) %>%\n  fmt_number(\n    columns = vars(volume),\n    suffixing = TRUE\n  )\n\n\n\nS&P 500\n    2010-06-07 to 2010-06-14\n    date\n      open\n      high\n      low\n      close\n      volume\n    Mon, Jun 14, 2010\n$1,095.00\n$1,105.91\n$1,089.03\n$1,089.63\n4.43BFri, Jun 11, 2010\n$1,082.65\n$1,092.25\n$1,077.12\n$1,091.60\n4.06BThu, Jun 10, 2010\n$1,058.77\n$1,087.85\n$1,058.77\n$1,086.84\n5.14BWed, Jun 9, 2010\n$1,062.75\n$1,077.74\n$1,052.25\n$1,055.69\n5.98BTue, Jun 8, 2010\n$1,050.81\n$1,063.15\n$1,042.17\n$1,062.00\n6.19BMon, Jun 7, 2010\n$1,065.84\n$1,071.36\n$1,049.86\n$1,050.47\n5.47B\n\nMarkdown tables\nYou can also define tables using markdown.\nFor example, the table from the previous section that describes paged\ntable options was defined with the following markdown:\n| Option           | Description                                    |\n|------------------|------------------------------------------------|\n| `rows.print`     | Maximum rows to print per page.                |\n| `max.print`      | Maximum rows in the table (defaults to 1000).  |\n| `cols.print`     | Maximum columns in the table (defaults to 10). |\n| `rownames.print` | Print row names as part of the table.          |\nYou can use Distill figure layout classes\nwith markdown tables by enclosing them in markdown div\n(:::) named with the appropriate class, for example:\n::: l-body-outset\n| Option           | Description                                    |\n|------------------|------------------------------------------------|\n| `rows.print`     | Maximum rows to print per page.                |\n| `max.print`      | Maximum rows in the table (defaults to 1000).  |\n| `cols.print`     | Maximum columns in the table (defaults to 10). |\n| `rownames.print` | Print row names as part of the table.          |\n:::\n\n\n\n",
      "last_modified": "2022-05-12T17:22:00+02:00"
    },
    {
      "path": "website.html",
      "title": "Creating a Website",
      "description": "Share a set of Distill articles as a website",
      "author": [],
      "contents": "\n\nContents\nGetting\nstarted\nWebsite or\nblog?\nCreating a\nwebsite\nAuthoring\narticles\nBuilding the\nsite\n\nSite output\nSite\nnavigation\nSite search\nSource code\nSite footer\n\nAlternate\nformats\nPostcards\n\nTheming\nCreate theme\nApply theme\nCustom CSS\nstyles\nExample\nthemes\n\nGoogle\nanalytics\nGDPR\ncompliance\nCookie\nconsent\nTagging\nscripts\n\nSite\nmetadata\nPublishing a website\n\nThis article describes how to create a website that contains a\ncollection of Distill articles. Distill websites include a top level\nnavigation bar that enables readers to discover and browse articles. For\nexample, the documentation pages you are reading now are a Distill\nwebsite. You can view more examples of Distill websites on the package\nreference\nsite.\nOnce you’ve created your website locally, there are a variety of ways\navailable to publish your site to the\nweb.\nGetting started\nWebsite or blog?\nStructure difference: Websites are just\ncollections of pages you can navigate to via the top navigation bar,\nwhereas blogs have collections of posts that can\nbe indexed and syndicated (via their RSS feed). Distill blogs are a\ndistill website with added blog posts.\nLayout difference: Within a blog, Distill\nenables a special page on your website called a listing page. Whereas websites\nrequire you to manually set up links to pages, a listing page collects\nlinks to posts for you, displaying key metadata (like date published,\nauthor, categories, title, etc.) and a thumbnail image. When you knit\nand publish a new post, this page automatically updates by adding the\nmost recent post to the top of the list.\nWorkflow difference: Furthermore, website pages and root\npages of blogs are re-rendered when the site is rebuilt but\nblog articles are not. Each blog article has to be rendered on its own,\nwith intent. Why? Given that R package upgrades have a tendency to break\nolder code, continuously re-rendering old posts is nearly impossible to\ndo without errors, especially over longer periods of time.\n\nCreating a website\nIf you are using RStudio, the easiest way to get started is to use\nthe Distill Website option in the RStudio New Project\ndialog:\n\nA new RStudio\nProject for the website will be created and opened. The website will\ninclude the following files:\nOption\nDescription\n_site.yml\nWebsite configuration file.\nindex.Rmd\nWebsite home page.\nabout.Rmd\nWebsite about page.\nIf you are not using RStudio you can also call the Distill\ncreate_website() function:\n\n\nlibrary(distill)\ncreate_website(dir = \"my-website\", title = \"My Website\")\n\n\n\nA new website containing Home and About pages will be created within\nthe my-website directory.\nAuthoring articles\nWhen you use the RStudio Knit command on a Distill\narticle within a website, only that article will be rendered and\npreviewed:\n\nYou can also preview a single article from within a website by\npassing the name of the article’s Rmd file to\nrender_site():\n\n\nrender_site(\"about.Rmd\")\n\n\n\nThis will build only the specified article (as opposed to all\narticles in the site). This is our recommended workflow for authoring\narticles since it offers the fastest turnaround time for previews (since\nonly the article you are working on is rendered).\nBuilding the site\nAfter you’ve authored the various articles contained within the\nwebsite, you will want to build the entire site before deploying it.\nIf your Distill website is contained within an RStudio project, you\ncan use the Build Website command available in the\nBuild pane to generate the site:\n\nWhen you build a website, the following things occur:\nAll of the Rmd and md files in the root website directory will be\nrendered into HTML. Note however that markdown files beginning with “_”\nare not rendered (this is a convention to designate files that are\nincluded by top level documents).\nBlog posts will be copied into the posts\nsub-directory of the output directory and blog listing pages will be\nre-generated.\nThe generated HTML files and any supporting files (e.g. CSS and\nJavaScript) are copied into an output directory (_site by\ndefault).\nThe HTML files within the _site directory are now ready\nto deploy as a standalone static website.\nTo build a website from the command line, use the\nrmarkdown::render_site() function:\n\n\nlibrary(rmarkdown)\nrender_site()\n\n\n\nSite output\nThe _site.yml file has a number of options that\naffect site output including where it is written and what files are\nincluded and excluded from the site. Here’s an example that makes use of\na few of these options:\n_site.yml\nname: \"my-website\"\noutput_dir: \"_site\"\ninclude: [\"import.R\"]\nexclude: [\"docs.txt\", \"*.csv\"]\nThe name field provides a suggested URL path for your\nwebsite when it is published (by default this is just the name of the\ndirectory containing the site).\nThe output_dir field indicates which directory to copy\nsite content into (“_site” is the default if none is specified). Note\nthat this can be “.” to keep all content within the root website\ndirectory alongside the source code.\nThe include and exclude fields enable you\nto override the default behavior vis-à-vis what files are copied into\nthe output directory. By default, all files within the website directory\nare copied into the output directory (e.g. “_site”) save for the\nfollowing:\nFiles beginning with \".\" (hidden files).\nFiles beginning with \"_\"\nFiles known to contain R source code (e.g. \".R\",\n\".s\", \".Rmd\"), R data\n(e.g. \".RData\", \".rds\"), or configuration data\n(e.g. \"rsconnect\" ,\"packrat\",\n\"renv\")).\nThe include and exclude fields of\n_site.yml can be used to override this default behavior\n(wildcards can be used to specify groups of files to be included or\nexcluded). Note that the include and exclude\nfields target only top-level files and directories (i.e. a directory is\neither included or not, you can’t exclude a subset of files within a\ndirectory).\nNote also that include and exclude are\nnot used to determine which Rmd files are rendered (all of them\nin the root directory save for those named with the _\nprefix will be rendered).\nThe R Markdown documentation on creating\nwebsites has documentation on additional available features and\nconfiguration options. The remainder of this article describes features\nthat are specific to Distill websites.\nSite navigation\nSite navigation bars include the site’s title, an optional logo,\ntop-level links to articles, and if need be drop-down menus that include\nlinks to several articles. For example:\n\nElements of the site navigation bar are specified within the\nnavbar section of the _site.yml file. For\nexample, here is the YAML that was used to create the navigation bar\ndisplayed above:\n---\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\nnavbar:\n  logo:\n    image: images/logo.png\n    href: https://www.rstudio.com\n  right:\n    - text: \"Figures\"\n      href: figures.html\n    - text: \"Tables\"\n      href: tables.html\n    - text: \"Citations\"\n      href: citations.html\n    - text: \"Publish\"\n      menu:\n        - text: \"Publishing Articles\"\n          href: publish_article.html\n        - text: \"Publishing a Website\"\n          href: publish_website.html\n        - text: \"---\"\n        - text: \"Article Metadata\"\n          href: metadata.html\n    - icon: fab fa-github\n      href: https://github.com/rstudio/distill\noutput: distill::distill_article\n---\nNote that we specify that the menu items appear on the\nright side of the navigation bar. We could have also used\nleft, or chosen to put some items on the left\nand some on the right.\nNote also that we used an icon for one of the menus,\nspecifying the Font Awesome\nfab fa-github identifier for the GitHub icon (you can use\nany Font Awesome icon). If there isn’t a Font Awesome icon that matches\nthe image you want, you can also specify a custom image\nrather than an icon.\nSite search\nYou can add a search box to the navigation bar using the\nsearch field of the navbar key within\n_site.yml. For example:\n---\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\nnavbar:\n  logo:\n    image: images/logo.png\n    href: https://www.rstudio.com\n  search: true\n---\nNote that only articles with a description metadata\nfield are included within search results. Also note that search is\nenabled by default for blog sites.\nSource code\nIf you want to display a link to the source code for your website on\nthe navigation bar, add a source_url field to the\nnavbar definition. For example:\n---\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\nnavbar:\n  logo:\n    image: images/logo.png\n    href: https://www.rstudio.com\n  source_url: https://github.com/rstudio/distill\n---\nNote that if you’ve already defined a repository_url\nfield in _site.yml you can just use\nsource_url: true and your repository_url will\nbe used for the link.\nSite footer\nWhen you use a navigation bar, you can optionally also include a site\nfooter which uses the same theme (background and foreground colors). For\nexample:\n\nTo add a footer, simply include a file named\n_footer.html within your main site directory. For\nexample:\n_footer.html\n© Copyright 2018 [The Distill Template Authors]\n(https://github.com/distillpub/template/blob/master/AUTHORS) \nand [RStudio, Inc](https://www.rstudio.com).\n\nSoftware licensed under the [Apache License, v2.0]\n(https://www.apache.org/licenses/LICENSE-2.0).\nAlternate formats\nWhile you’ll typically use the distill::distill_article\nformat for pages within a distill website, you can also use any other\nHTML-based, single document R Markdown formats so long as it’s\nunderlying template has support for pandoc\nincludes.\nSupport for alternate output formats requires up-to-date versions of\nboth the distill and rmarkdown packages:\nversion >= 1.2\nof distill\nversion >= 2.7\nof rmarkdown\nYou can check these package versions as follows:\npackageVersion(\"distill\")\npackageVersion(\"rmarkdown\")\nAlternate output formats are supported only for top-level site pages\n(not for articles within collections, e.g. blog posts). Pages using an\nalternate format should be rendered via the\nrmarkdown::render_site() function to ensure they get\nsite-related headers and footers (this happens automatically when you\nKnit from within an RStudio website project).\nYou can disable support for rendering alternate formats by including\nalt_formats: false within your _site.yml\nfile.\nPostcards\nThe postcards\npackage enables you to create an attractive personal bio/contact page.\nTo add a postcard to your Distill site, first install the postcards\npackages from CRAN:\ninstall.packages(\"postcards\")\nThen use the create_postcard() function:\npostcards::create_postcard(\"about.Rmd\")\nNote that you can choose from several different postcard\ntemplates using the template argument of the\ncreate_postcard() function; the default is\ntemplate = \"jolla\". After creating your postcard, you may\nswitch templates by editing the YAML; here we’ll switch to using the\ntrestles template:\n---\noutput:\n  postcards::trestles\n---\nWhen you rebuild your site, the template should update.\nYou’ll likely also want to add a link to the postcard page within\nyour site’s navigation bar. For example:\nnavbar:\n  right:\n    - text: \"About\"\n      href: about.html\nTheming\nDistill ships with a default CSS framework that can be fully\ncustomized. To change the appearance of your Distill site or blog, you\ncan use CSS to override the default values, provided you are comfortable\nwriting CSS rules and selecting CSS elements. Alternatively, you may create and apply a\nDistill theme, which allows you to customize common elements without\nneeding to create a CSS file from scratch.\nCreate theme\nYou can use the create_theme() function to add a theme\nCSS file in the current working directory.\nFor example:\n\n\ncreate_theme(name = \"theme\") \n\n\n\nThis function creates a file named theme with the file\nextension .css. The file defines CSS custom\nproperties that you can edit to create a custom Distill theme. This\nfile has several sections, defined by a common scope. For\neach scoped section, you’ll find multiple properties that are defined\nthat look something like this:\nscope {\n  --a-property:       50px;\n  --another-property: #fff;\n}\nThe values provided for each property (i.e., those in the right-most\ncolumn) are the default values. For example, this portion at the top of\nthe file allows you to quickly change the main font sizes for any\nDistill output format:\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- More properties --*/\n  ...\n}\nChanging the values for each custom property is akin to developing\nyour own custom CSS rules, but the theme allows you to bypass the\ndetective work typically involved in discovering which CSS selectors are\nneeded to change the key elements most users wish to control.\nWe’ll demonstrate how to edit and use a theme by showing a single\narticle within a Distill website. The default theme is shown in Figure\n1.\n\n\n\nFigure 1: The default Distill theme\n\n\n\nOne of the fastest ways to change the default appearance is to use\ncustom Google fonts. To do this, you need to do two things:\nEmbed the font using the @import\nmethod, and\nSpecify the font in the CSS file.\nYou can do both of these things inside your theme.css\nfile. For example, let’s import the Amiri, Bitter, and DM Mono fonts:\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n@import url('https://fonts.googleapis.com/css2?family=Amiri');\n@import url('https://fonts.googleapis.com/css2?family=Bitter');\n@import url('https://fonts.googleapis.com/css2?family=DM+Mono');\nThe @import requests must be at the very top of\nyour theme.css, before any rules. Next, scroll down to the\nbottom of the properties with the html scope to specify the\nembedded fonts:\nhtml {\n  ...\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    \"Amiri\", serif;\n  --mono-font:       \"DM Mono\", monospace;\n  --body-font:       \"Bitter\", sans-serif;\n  --navbar-font:     \"Amiri\", serif;\n}\nBut we can go even further! Let’s also change the background color of\nthe navbar, the text color, and the hover color. These three properties\nare listed with the .distill-site-header scope. For\nexample:\n/*-- WEBSITE HEADER + FOOTER --*/\n/* These properties only apply to Distill sites and blogs  */\n\n.distill-site-header {\n  --title-size:       18px;    \n  --text-color:       #ff414b; /* edited */\n  --text-size:        15px;\n  --hover-color:      #dd424c; /* edited */\n  --bkgd-color:       #ffd8db; /* edited */\n}\n\n\n\nOur new custom theme is shown below. In this example, we only changed\nfour font properties and three website header properties, and already\nour site looks quite different from the default.\n\nThemed site\n\n\n\nFigure 2: A custom Distill theme\n\n\n\nDefault site\n\n\n\nFigure 3: The default Distill theme\n\n\n\n\nTo preview your custom Distill theme, you’ll also need to apply it to your article or site.\nAs you can see, we include a lot more properties for you to explore\nand edit in your own custom theme. If you find yourself editing too much\nand want to return back to a default value, you may set any property to\nunset. For example:\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      unset;\n}\nOf course, there may be additional properties that you’d like to\nchange, and you may always add in your own custom CSS rules in the space provided at the\nbottom of your theme file, or in a separate .css file.\nTo see your theme in action, you’ll need to also apply it to your article or site.\nApply theme\nThe previous section described how to\ncreate and customize a Distill theme file.\nHow do you apply a custom theme to a Distill site or blog? You have\ntwo options:\nApply it site-wide by adding a theme key to the\ntop-level of your _site.yml configuration file:\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\ntheme: theme.css\nnavbar:\n  # (navbar definition here)\nApply to an individual article by adding a theme key\nto your article’s YAML front-matter:\n---\ntitle: \"The Sharpe Ratio\"\noutput:\n  distill::distill_article:\n    toc: true\n    theme: theme.css\n---\nThe second option allows for you to apply your theme to individual\narticles, while using a different theme for the rest of your site. Note\nthat this is only possible for stand-alone articles within a website —\nyou cannot apply a theme to individual blog posts only.\n\nBlog posts (along with listing\nand custom listing pages) will\nfollow the theme if you use the first option and add it to your\n_site.yml.\nCustom CSS styles\nIf you prefer working with CSS directly, or you would like to change\nsite elements not included in the theme file, you can define your own\nCSS as well. For example, we can override the default styles for bullets\nand links by adding additional CSS rules in the space provided at the\nbottom of your theme.css. We’ll add the following CSS rules\non top of the theme we made in the previous\nsection:\n/*-- Additional custom styles --*/\n/* Add any additional CSS rules below                      */\n\n/* Change bullets */\nul > li::marker {\n  font-size: 1.125em;\n  color: #ff414b;\n}\n\n/* Change link appearance */\nd-article a {\n  border-bottom: 2px solid #ffd8db;\n  text-decoration: none;\n}\nHere is the before (left) and after (right):\n\n\nknitr::include_graphics(c(\"images/css-before.png\", \"images/css-after.png\"))\n\n\n\n\nUsing CSS, you can change anything about your site’s appearance. For\nexample, the distill-site-nav class addresses both the\nheader and footer, whereas the distill-site-header and\ndistill-site-footer apply (respectively) to just the header\nand footer. Here is the CSS used for the default appearance:\n.distill-site-nav {\n  color: rgba(255, 255, 255, 0.8);\n  background-color: #455a64;\n  font-size: 15px;\n  font-weight: 300;\n}\n\n.distill-site-nav a {\n  color: inherit;\n  text-decoration: none;\n}\n\n.distill-site-nav a:hover {\n  color: white;\n}\n\n.distill-site-header {\n}\n\n.distill-site-footer {\n}\n\n@media print {\n  .distill-site-nav {\n    display: none;\n  }\n}\nTo override any CSS properties, you may include a\nstyles.css file in the main site directory and add a\nreference to it within your site output options. For example:\n_site.yml\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\nnavbar:\n  # (navbar definition here)\noutput:\n  distill::distill_article:\n    css: styles.css\nExample themes\nBelow are some sample themes to see what is possible using a Distill\ntheme, plus a handful of custom CSS rules.\nPiping Hot Data\n\nInspiration\nhttps://www.pipinghotdata.com/\nScreenshot\n\n\n\ntheme.css\n/* base variables */\n\n/* Edit the CSS properties in this file to create a custom\n   Distill theme. Only edit values in the right column\n   for each row; values shown are the CSS defaults.\n   To return any property to the default,\n   you may set its value to: unset\n   All rows must end with a semi-colon.                      */\n\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n@import url('https://fonts.googleapis.com/css2?family=Lato');\n@import url('https://fonts.googleapis.com/css2?family=Fira+Mono');\n@import url('https://fonts.googleapis.com/css2?family=Montserrat');\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.0rem;                     /* edited */\n  --code-size:       0.9rem;                     /* edited */\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --heading-color:   rgba(0, 0, 0, 0.8);\n  --body-color:      #383838;                    /* edited */\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    'Lato', sans-serif;         /* edited */\n  --mono-font:       'Fira Mono', monospace;     /* edited */\n  --body-font:       'Lato', sans-serif;         /* edited */\n  --navbar-font:     'Montserrat', sans-serif;   /* edited */\n}\n\n/*-- ARTICLE METADATA --*/\nd-byline {\n  --heading-size:    0.6rem;\n  --heading-color:   rgba(0, 0, 0, 0.5);\n  --body-size:       0.8rem;\n  --body-color:      rgba(0, 0, 0, 0.8);\n}\n\n/*-- ARTICLE TABLE OF CONTENTS --*/\n.d-contents {\n  --heading-size:    18px;\n  --contents-size:   13px;\n}\n\n/*-- ARTICLE APPENDIX --*/\nd-appendix {\n  --heading-size:    15px;\n  --heading-color:   rgba(0, 0, 0, 0.65);\n  --text-size:       0.8em;\n  --text-color:      rgba(0, 0, 0, 0.5);\n}\n\n/*-- WEBSITE HEADER + FOOTER --*/\n/* These properties only apply to Distill sites and blogs  */\n\n.distill-site-header {\n  --title-size:       20px;                      /* edited */\n  --text-color:       #FFFFFF;                   /* edited */\n  --text-size:        20px;                      /* edited */\n  --hover-color:      #383838;                   /* edited */\n  --bkgd-color:       rgb(249, 83, 85);          /* edited */\n}\n\n.distill-site-footer {\n  --text-color:       rgba(255, 255, 255, 0.8);\n  --text-size:        15px;\n  --hover-color:      white;\n  --bkgd-color:       #0F2E3D;\n}\n\n\n/*-- Additional custom styles --*/\n\n.posts-list .metadata .publishedDate {\n    color: rgb(249, 83, 85);\n}\n\nd-article p code {\n  color: #383838;\n  background: rgba(249, 83, 85, 0.1);\n  font-weight: 400;\n  font-size: 0.9em;\n}\n\nd-article a {\n    border-bottom: 2px solid rgba(249, 83, 85, 0.4);\n    text-decoration: none;\n}\n\n.distill-site-header .title {\n    font-weight: 600; \n}\n\nul > li::marker {\n  color: rgb(249, 83, 85);\n}\n\nBefore I Sleep\n\nInspiration\nhttps://milesmcbain.xyz/\nScreenshot\n\n\n\ntheme.css\n/* base variables */\n\n/* Edit the CSS properties in this file to create a custom\n   Distill theme. Only edit values in the right column\n   for each row; values shown are the CSS defaults.\n   To return any property to the default,\n   you may set its value to: unset\n   All rows must end with a semi-colon.                      */\n\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n@import url('https://fonts.googleapis.com/css2?family=Cardo');\n@import url('https://fonts.googleapis.com/css2?family=Alata');\n\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.075rem;                   /* edited */\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --heading-color:   rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    'Alata', sans-serif;        /* edited */\n  --mono-font:       monospace;\n  --body-font:       'Cardo', serif;             /* edited */\n  --navbar-font:     'Alata', sans-serif;        /* edited */\n}\n\n/*-- ARTICLE METADATA --*/\nd-byline {\n  --heading-size:    0.6rem;\n  --heading-color:   rgba(0, 0, 0, 0.5);\n  --body-size:       0.8rem;\n  --body-color:      rgba(0, 0, 0, 0.8);\n}\n\n/*-- ARTICLE TABLE OF CONTENTS --*/\n.d-contents {\n  --heading-size:    18px;\n  --contents-size:   13px;\n}\n\n/*-- ARTICLE APPENDIX --*/\nd-appendix {\n  --heading-size:    15px;\n  --heading-color:   rgba(0, 0, 0, 0.65);\n  --text-size:       1.075rem;                   /* edited */\n  --text-color:      rgb(0, 0, 0);               /* edited */\n}\n\n/*-- WEBSITE HEADER + FOOTER --*/\n/* These properties only apply to Distill sites and blogs  */\n\n.distill-site-header {\n  --title-size:       18px;\n  --text-color:       #000;                     /* edited */\n  --text-size:        15px;\n  --hover-color:      #ff00ff;                  /* edited */\n  --bkgd-color:       #fff;                     /* edited */\n}\n\n.distill-site-footer {\n  --text-color:       rgba(255, 255, 255, 0.8);\n  --text-size:        15px;\n  --hover-color:      white;\n  --bkgd-color:       #0F2E3D;\n}\n\n/*-- Additional custom styles --*/\n\n.categories li > a:hover {\n    color: #00ff00;\n    border-bottom: 1px #00ff00;\n}\n\np a:hover  {\n    color: #00ff00;\n}\n\n/* Change appearance of headers */\nh1, h2, h3, h4, h5 {\n    font-weight: 700;\n}\n\n/* Use specific font in the body of the text */\nhtml, body, p {\n    font-weight: 200;\n    /*line-height: 1.3rem; */\n    /*font-style: normal;*/\n}\n\nul > li::marker {\n    font-weight: 700;\n    font-size: 1.125em;\n}\n\nTidymodels\n\nInspiration\nhttps://tidymodels.org (courtesy Desirée De Leon)\nScreenshot\n\n\n\ntheme.css\n/* base variables */\n\n/* Edit the CSS properties in this file to create a custom\n   Distill theme. Only edit values in the right column\n   for each row; values shown are the CSS defaults.\n   To return any property to the default,\n   you may set its value to: unset\n   All rows must end with a semi-colon.                      */\n\n/* Optional: embed custom fonts here with `@import`          */\n/* This must remain at the top of this file.                 */\n@import url('https://fonts.googleapis.com/css?family=Noto+Serif+JP:300, 300i&display=swap');\n@import url('https://fonts.googleapis.com/css?family=Lato:400,400i,700&display=swap');\n@import url('https://fonts.googleapis.com/css?family=IBM+Plex+Mono&display=swap');\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #ca225e;\n  --header-color:    #ca225e;                    /* edited */\n  --body-color:      #404040;                    /* edited */\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    \"Noto Serif JP\", sans-serif; /* edited */\n  --mono-font:       \"IBM Plex Mono\", monospace;  /* edited */\n  --body-font:       \"Lato\", sans-serif;          /* edited */\n  --navbar-font:     \"Lato\", sans-serif;          /* edited */\n}\n\n/*-- ARTICLE METADATA --*/\nd-byline {\n  --heading-size:    0.9rem;                      /* edited */\n  --heading-color:   rgba(0, 0, 0, 0.5);\n  --body-size:       0.95rem;                     /* edited */\n  --body-color:      rgba(0, 0, 0, 0.8);\n}\n\n/*-- ARTICLE TABLE OF CONTENTS --*/\n.d-contents {\n  --heading-size:    18px;\n  --contents-size:   13px;\n}\n\n/*-- ARTICLE APPENDIX --*/\nd-appendix {\n  --heading-size:    15px;\n  --heading-color:   rgba(0, 0, 0, 0.65);      \n  --text-size:       0.9rem;                    /* edited */\n  --text-color:      #1a162d;                   /* edited */\n}\n\n/*-- WEBSITE HEADER + FOOTER --*/\n/* These properties only apply to Distill sites and blogs  */\n\n.distill-site-header {\n  --title-size:       18px;\n  --text-color:       #1f1f1f;                   /* edited */\n  --text-size:        15px;\n  --hover-color:      #787878;                   /* edited */\n  --bkgd-color:       #fff;                      /* edited */\n}\n\n.distill-site-footer {\n  --text-color:       #7e7b88;                   /* edited */\n  --text-size:        15px;\n  --hover-color:      white;\n  --bkgd-color:       #ca225e3d;                 /* edited */\n}\n\n/*-- Additional custom styles --*/\n\nul > li::marker {\n  color: #ca225e;\n}\n\n.distill-site-header { \n  letter-spacing: 2px;\n  text-transform: uppercase;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  letter-spacing: 2px;\n  font-weight: 300;\n}\n\n.distill-site-header .logo img{\n  max-height: 40px; /* Makes logo bigger, default was 20px */\n}\n\n.distill-site-header {\n  padding-top: 1rem;\n}\n\nd-title h1,\nd-article h2,\n.posts-list .description h2,\n.posts-list > h1 {\n    font-weight: 300;\n}\n\nd-appendix {\n  background-color: #fdf7f9;\n  border-top: none;\n}\n\nThese panelsets\nwere made with the xaringanExtra\npackage.\nGoogle analytics\nYou can add Google\nAnalytics to your website by adding a google_analytics\ntracking ID to your _site.yml file. For example:\n_site.yml\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\nbase_url: https://rstudio.github.io/distill\ngoogle_analytics: \"UA-77306155-2\"\nnavbar:\n  # (navbar definition here)\noutput: distill::distill_article\nThe Google Analytics tracking code will be automatically included on\nall pages of your website.\nGDPR compliance\nDisclaimer: The information provided in this section does not, and is\nnot intended to, constitute legal advice; instead, all information,\ncontent, and materials available in this section are for general\ninformational purposes only.\nWhen using Google Analytics, Disqus and other services that set\ncookies in the end-user’s browser, it is important to ensure compliance\nwith Data Protection regulations, e.g., GDPR among others. Besides the\nGDPR many countries are imposing their own data privacy laws, and\nleading law experts expect that the pace of legislation in this field,\nwill continue accelerating through the foreseeable future.\nThe GDPR is one of the strictest and most far-reaching of these\nregulations, imposing obligations onto data controllers anywhere in the\nworld, who processes personal data of subjects residing in the EU.\nTherefore, the GDPR is also a great standard to ensure compliance with\nmost data protection regulations in general. In order to ensure\ncompliance with the GDPR, data controllers must acquire consent from\ndata subjects, before processing their personal information, and this\nalso includes setting web cookies.\nCookie consent\nOne way of requesting consent is through a Cookie Consent banner,\nwhich can be enabled in the _site.yml like so:\n_site.yml\ncookie_consent:\n  style: simple\n  type: express\n  palette: light\n  lang: en\n  cookies_policy: url\nThe cookie consent banner is generated using a javascript plugin from\nCookieconsent.com, which\nfeatures different options for customizing the banner.\nstyle: simple/headline/interstitial/standalone\ntype: express/implied\npalette: light/dark\nlang:\nen/de/fr/es/ca_es/it/nl/pt/fi/hu/cs/hr/da/sl/pl/ro/sr/bg/cy\ncookies_policy: link to cookies policy\nThe banner will be shown automatically if you use either Google\nAnalytics or Disqus on your site.\nTagging scripts\nIf your site uses custom JavaScript that sets cookies, these should\nbe tagged as text/plain and either as “strictly-necessary”,\n“functionality”, “tracking” or “targeting”. For example:\n<script type=\"text/plain\" cookie-consent=\"functionality\" src=\"myscript.js\"><\/script>\nNote that besides having a cookie consent banner, to ensure GDPR\ncompliance, your site should have a Cookies policy separate from your\nPrivacy policy, and also allow site users to change cookie preferences.\nA button to open the Cookie Preferences Center can be added to the\nfooter, by creating a button or a link with the id-tag set to\nCookiePreferences, in _footer.html. For example:\n<a id='CookiePreferences'>Cookie Preferences<\/a>\nSite metadata\nDistill articles can include various types of metadata to make them easier to index, cite,\nand share. Metadata included within your _site.yml file is\nconveniently shared across all articles on your site (individual\narticles can always override any value within their own metadata).\nSeveral metadata values which you might find useful to define in\n_site.yml are:\nMetadata\nDescription\nbase_url\nBase (root) URL for the location where the website will be deployed\n(used for providing preview\nimages for Open Graph and Twitter Card).\nrepository_url\nURL for the source code of your website. Used to create a navbar\nlink back to the repository and to create a Corrections\nappendix.\ncreative_commons\nCreative Commons\nlicense terms for website content. Used to automatically generate a\nReuse appendix.\nlicense_url\nAlternate licensing terms for website content if not using a\nCreative Commons license.\nfavicon\nFavicon (image file) to use for browser tabs/bookmarks\ntwitter\nSite handle for Twitter Card metadata\nHere’s a _site.yml file that uses all of these fields\n(save for license_url since the license is already\nspecified via creative_commons):\n_site.yml\nname: \"distill\"\ntitle: \"Distill for R Markdown\"\nfavicon: images/favicon.png\nbase_url: https://rstudio.github.io/distill\nrepository_url: https://github.com/rstudio/distill\ncreative_commons: CC BY\ntwitter:\n  site: \"@distilljournal\"\nnavbar:\n  # (navbar definition here)\noutput: distill::distill_article\nBe sure to enclose Twitter account names in quotes (this is required\nbecause they start with @).\nPublishing a website\nWebsite content is by default written to the _site\nsub-directory (you can customize this using the output_dir\nmetadata field). Publishing is simply a matter of copying the output\ndirectory to a web server or web hosting service.\nSee the article on publishing\nwebsites for additional details on publishing sites using a variety\nof available hosting services.\n\n\n\n",
      "last_modified": "2022-05-12T17:22:01+02:00"
    }
  ],
  "collections": []
}
